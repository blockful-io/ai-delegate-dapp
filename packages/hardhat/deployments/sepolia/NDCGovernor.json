{
  "address": "0xdCf5B18976cA5074b7702aAEf7b083E7c917ad4E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVotes",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CheckpointUnorderedInsertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "GovernorAlreadyCastVote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "GovernorAlreadyQueuedProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernorDisabledDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "GovernorInsufficientProposerVotes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calldatas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "values",
          "type": "uint256"
        }
      ],
      "name": "GovernorInvalidProposalLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quorumNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quorumDenominator",
          "type": "uint256"
        }
      ],
      "name": "GovernorInvalidQuorumFraction",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "GovernorInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernorInvalidVoteType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "votingPeriod",
          "type": "uint256"
        }
      ],
      "name": "GovernorInvalidVotingPeriod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "GovernorNonexistentProposal",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "GovernorNotQueuedProposal",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorOnlyExecutor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorOnlyProposer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GovernorQueueNotImplemented",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "GovernorRestrictedProposer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "enum IGovernor.ProposalState",
          "name": "current",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "expectedStates",
          "type": "bytes32"
        }
      ],
      "name": "GovernorUnexpectedProposalState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "name": "InvalidAccountNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QueueEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QueueFull",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "etaSeconds",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldQuorumNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "QuorumNumeratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "VoteCastWithParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLOCK_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COUNTING_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXTENDED_BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "castVoteWithReasonAndParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "castVoteWithReasonAndParamsBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clock",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "getVotesWithParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "hashProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalEta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalNeedsQueuing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalProposer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "queue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timepoint",
          "type": "uint256"
        }
      ],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "relay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IGovernor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC5805",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "updateQuorumNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6bc8474f29bc164ae3d298adc996664a6945e740c4eaf81c80107757c5d5b05d",
  "receipt": {
    "to": null,
    "from": "0xa1917Ef1C3F42b6Dc83c7D60534cd6F423ae6f89",
    "contractAddress": "0xdCf5B18976cA5074b7702aAEf7b083E7c917ad4E",
    "transactionIndex": 77,
    "gasUsed": "3302802",
    "logsBloom": "0x
    "blockHash": "0xccf0b1cee04f151550b5d765b017685fbc8094e12f6f2103a1ca98f1202e1d4c",
    "transactionHash": "0x6bc8474f29bc164ae3d298adc996664a6945e740c4eaf81c80107757c5d5b05d",
    "logs": [
      {
        "transactionIndex": 77,
        "blockNumber": 5546316,
        "transactionHash": "0x6bc8474f29bc164ae3d298adc996664a6945e740c4eaf81c80107757c5d5b05d",
        "address": "0xdCf5B18976cA5074b7702aAEf7b083E7c917ad4E",
        "topics": [
          "0x0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 76,
        "blockHash": "0xccf0b1cee04f151550b5d765b017685fbc8094e12f6f2103a1ca98f1202e1d4c"
      }
    ],
    "blockNumber": 5546316,
    "cumulativeGasUsed": "7597885",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcd99AA11b9aB73Bdd06c4dACB20C3616DA57f3B0"
  ],
  "numDeployments": 1,
  "solcInputHash": "a8030f30d04805b9bbf50afa36e0ff0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVotes\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"GovernorAlreadyCastVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"GovernorAlreadyQueuedProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorDisabledDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"GovernorInsufficientProposerVotes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldatas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"GovernorInvalidProposalLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumDenominator\",\"type\":\"uint256\"}],\"name\":\"GovernorInvalidQuorumFraction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"GovernorInvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorInvalidVoteType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"}],\"name\":\"GovernorInvalidVotingPeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"GovernorNonexistentProposal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"GovernorNotQueuedProposal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorOnlyExecutor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorOnlyProposer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorQueueNotImplemented\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"GovernorRestrictedProposer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernor.ProposalState\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"expectedStates\",\"type\":\"bytes32\"}],\"name\":\"GovernorUnexpectedProposalState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueFull\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etaSeconds\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"QuorumNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"VoteCastWithParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COUNTING_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTENDED_BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"castVoteBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"castVoteWithReasonAndParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"castVoteWithReasonAndParamsBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"getVotesWithParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalEta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalNeedsQueuing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalProposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC5805\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"updateQuorumNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"GovernorAlreadyCastVote(address)\":[{\"details\":\"The vote was already cast.\"}],\"GovernorAlreadyQueuedProposal(uint256)\":[{\"details\":\"The proposal has already been queued.\"}],\"GovernorDisabledDeposit()\":[{\"details\":\"Token deposits are disabled in this contract.\"}],\"GovernorInsufficientProposerVotes(address,uint256,uint256)\":[{\"details\":\"The `proposer` does not have the required votes to create a proposal.\"}],\"GovernorInvalidProposalLength(uint256,uint256,uint256)\":[{\"details\":\"Empty proposal or a mismatch between the parameters length for a proposal call.\"}],\"GovernorInvalidQuorumFraction(uint256,uint256)\":[{\"details\":\"The quorum set is not a valid fraction.\"}],\"GovernorInvalidSignature(address)\":[{\"details\":\"The provided signature is not valid for the expected `voter`. If the `voter` is a contract, the signature is not valid using {IERC1271-isValidSignature}.\"}],\"GovernorInvalidVoteType()\":[{\"details\":\"The vote type used is not valid for the corresponding counting module.\"}],\"GovernorInvalidVotingPeriod(uint256)\":[{\"details\":\"The voting period set is not a valid period.\"}],\"GovernorNonexistentProposal(uint256)\":[{\"details\":\"The `proposalId` doesn't exist.\"}],\"GovernorNotQueuedProposal(uint256)\":[{\"details\":\"The proposal hasn't been queued yet.\"}],\"GovernorOnlyExecutor(address)\":[{\"details\":\"The `account` is not the governance executor.\"}],\"GovernorOnlyProposer(address)\":[{\"details\":\"The `account` is not a proposer.\"}],\"GovernorQueueNotImplemented()\":[{\"details\":\"Queue operation is not implemented for this governor. Execute should be called directly.\"}],\"GovernorRestrictedProposer(address)\":[{\"details\":\"The `proposer` is not allowed to create a proposal.\"}],\"GovernorUnexpectedProposalState(uint256,uint8,bytes32)\":[{\"details\":\"The current state of a proposal is not the required for performing an operation. The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position counting from right to left. NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist). This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated). See {Governor-_encodeStateBitmap}.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"QueueEmpty()\":[{\"details\":\"An operation (e.g. {front}) couldn't be completed due to the queue being empty.\"}],\"QueueFull()\":[{\"details\":\"A push operation couldn't be completed due to the queue being full.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"ProposalCanceled(uint256)\":{\"details\":\"Emitted when a proposal is canceled.\"},\"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\":{\"details\":\"Emitted when a proposal is created.\"},\"ProposalExecuted(uint256)\":{\"details\":\"Emitted when a proposal is executed.\"},\"ProposalQueued(uint256,uint256)\":{\"details\":\"Emitted when a proposal is queued.\"},\"VoteCast(address,uint256,uint8,uint256,string)\":{\"details\":\"Emitted when a vote is cast without params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\"},\"VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)\":{\"details\":\"Emitted when a vote is cast with params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used. `params` are additional encoded parameters. Their interpepretation also depends on the voting module used.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in EIP-6372.\"},\"COUNTING_MODE()\":{\"details\":\"See {IGovernor-COUNTING_MODE}.\"},\"cancel(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-cancel}.\"},\"castVote(uint256,uint8)\":{\"details\":\"See {IGovernor-castVote}.\"},\"castVoteBySig(uint256,uint8,address,bytes)\":{\"details\":\"See {IGovernor-castVoteBySig}.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"details\":\"See {IGovernor-castVoteWithReason}.\"},\"castVoteWithReasonAndParams(uint256,uint8,string,bytes)\":{\"details\":\"See {IGovernor-castVoteWithReasonAndParams}.\"},\"castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)\":{\"details\":\"See {IGovernor-castVoteWithReasonAndParamsBySig}.\"},\"clock()\":{\"details\":\"Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token does not implement EIP-6372.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"execute(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-execute}.\"},\"getVotes(address,uint256)\":{\"details\":\"See {IGovernor-getVotes}.\"},\"getVotesWithParams(address,uint256,bytes)\":{\"details\":\"See {IGovernor-getVotesWithParams}.\"},\"hasVoted(uint256,address)\":{\"details\":\"See {IGovernor-hasVoted}.\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts.\"},\"name()\":{\"details\":\"See {IGovernor-name}.\"},\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155BatchReceived}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155Received}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\"},\"proposalDeadline(uint256)\":{\"details\":\"See {IGovernor-proposalDeadline}.\"},\"proposalEta(uint256)\":{\"details\":\"See {IGovernor-proposalEta}.\"},\"proposalNeedsQueuing(uint256)\":{\"details\":\"See {IGovernor-proposalNeedsQueuing}.\"},\"proposalProposer(uint256)\":{\"details\":\"See {IGovernor-proposalProposer}.\"},\"proposalSnapshot(uint256)\":{\"details\":\"See {IGovernor-proposalSnapshot}.\"},\"proposalThreshold()\":{\"details\":\"See {IGovernor-proposalThreshold}.\"},\"proposalVotes(uint256)\":{\"details\":\"Accessor to the internal vote counts.\"},\"propose(address[],uint256[],bytes[],string)\":{\"details\":\"See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\"},\"queue(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-queue}.\"},\"quorumDenominator()\":{\"details\":\"Returns the quorum denominator. Defaults to 100, but may be overridden.\"},\"quorumNumerator()\":{\"details\":\"Returns the current quorum numerator. See {quorumDenominator}.\"},\"quorumNumerator(uint256)\":{\"details\":\"Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\"},\"relay(address,uint256,bytes)\":{\"details\":\"Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant.\"},\"state(uint256)\":{\"details\":\"See {IGovernor-state}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"token()\":{\"details\":\"The token that voting power is sourced from.\"},\"updateQuorumNumerator(uint256)\":{\"details\":\"Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator.\"},\"version()\":{\"details\":\"See {IGovernor-version}.\"},\"votingDelay()\":{\"details\":\"Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a proposal starts. NOTE: While this interface returns a uint256, timepoints are stored as uint48 following the ERC-6372 clock type. Consequently this value must fit in a uint48 (when added to the current clock). See {IERC6372-clock}.\"},\"votingPeriod()\":{\"details\":\"Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay. NOTE: This value is stored when the proposal is submitted so that possible changes to the value do not affect proposals that have already been submitted. The type used to save it is a uint32. Consequently, while this interface returns a uint256, the value it returns should fit in a uint32.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"votingDelay()\":{\"notice\":\"module:user-config\"},\"votingPeriod()\":{\"notice\":\"module:user-config\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governor.sol\":\"NDCGovernor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/governance/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport { IERC721Receiver } from \\\"../token/ERC721/IERC721Receiver.sol\\\";\\nimport { IERC1155Receiver } from \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport { EIP712 } from \\\"../utils/cryptography/EIP712.sol\\\";\\nimport { SignatureChecker } from \\\"../utils/cryptography/SignatureChecker.sol\\\";\\nimport { IERC165, ERC165 } from \\\"../utils/introspection/ERC165.sol\\\";\\nimport { SafeCast } from \\\"../utils/math/SafeCast.sol\\\";\\nimport { DoubleEndedQueue } from \\\"../utils/structs/DoubleEndedQueue.sol\\\";\\nimport { Address } from \\\"../utils/Address.sol\\\";\\nimport { Context } from \\\"../utils/Context.sol\\\";\\nimport { Nonces } from \\\"../utils/Nonces.sol\\\";\\nimport { IGovernor, IERC6372 } from \\\"./IGovernor.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended through various modules.\\n *\\n * This contract is abstract and requires several functions to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {_getVotes}\\n * - Additionally, {votingPeriod} must also be implemented\\n */\\nabstract contract Governor is\\n\\tContext,\\n\\tERC165,\\n\\tEIP712,\\n\\tNonces,\\n\\tIGovernor,\\n\\tIERC721Receiver,\\n\\tIERC1155Receiver\\n{\\n\\tusing DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n\\n\\tbytes32 public constant BALLOT_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\t\\\"Ballot(uint256 proposalId,uint8 support,address voter,uint256 nonce)\\\"\\n\\t\\t);\\n\\tbytes32 public constant EXTENDED_BALLOT_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\t\\\"ExtendedBallot(uint256 proposalId,uint8 support,address voter,uint256 nonce,string reason,bytes params)\\\"\\n\\t\\t);\\n\\n\\tstruct ProposalCore {\\n\\t\\taddress proposer;\\n\\t\\tuint48 voteStart;\\n\\t\\tuint32 voteDuration;\\n\\t\\tbool executed;\\n\\t\\tbool canceled;\\n\\t\\tuint48 etaSeconds;\\n\\t}\\n\\n\\tbytes32 private constant ALL_PROPOSAL_STATES_BITMAP =\\n\\t\\tbytes32((2 ** (uint8(type(ProposalState).max) + 1)) - 1);\\n\\tstring private _name;\\n\\n\\tmapping(uint256 proposalId => ProposalCore) private _proposals;\\n\\n\\t// This queue keeps track of the governor operating on itself. Calls to functions protected by the {onlyGovernance}\\n\\t// modifier needs to be whitelisted in this queue. Whitelisting is set in {execute}, consumed by the\\n\\t// {onlyGovernance} modifier and eventually reset after {_executeOperations} completes. This ensures that the\\n\\t// execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\\n\\tDoubleEndedQueue.Bytes32Deque private _governanceCall;\\n\\n\\t/**\\n\\t * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\\n\\t * parameter setters in {GovernorSettings} are protected using this modifier.\\n\\t *\\n\\t * The governance executing address may be different from the Governor's own address, for example it could be a\\n\\t * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\\n\\t * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\\n\\t * for example, additional timelock proposers are not able to change governance parameters without going through the\\n\\t * governance protocol (since v4.6).\\n\\t */\\n\\tmodifier onlyGovernance() {\\n\\t\\t_checkGovernance();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the value for {name} and {version}\\n\\t */\\n\\tconstructor(string memory name_) EIP712(name_, version()) {\\n\\t\\t_name = name_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n\\t */\\n\\treceive() external payable virtual {\\n\\t\\tif (_executor() != address(this)) {\\n\\t\\t\\trevert GovernorDisabledDeposit();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual override(IERC165, ERC165) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IGovernor).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC1155Receiver).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-name}.\\n\\t */\\n\\tfunction name() public view virtual returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-version}.\\n\\t */\\n\\tfunction version() public view virtual returns (string memory) {\\n\\t\\treturn \\\"1\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-hashProposal}.\\n\\t *\\n\\t * The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array\\n\\t * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n\\t * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n\\t * advance, before the proposal is submitted.\\n\\t *\\n\\t * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n\\t * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n\\t * across multiple networks. This also means that in order to execute the same operation twice (on the same\\n\\t * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n\\t */\\n\\tfunction hashProposal(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tbytes32 descriptionHash\\n\\t) public pure virtual returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(targets, values, calldatas, descriptionHash)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-state}.\\n\\t */\\n\\tfunction state(\\n\\t\\tuint256 proposalId\\n\\t) public view virtual returns (ProposalState) {\\n\\t\\t// We read the struct fields into the stack at once so Solidity emits a single SLOAD\\n\\t\\tProposalCore storage proposal = _proposals[proposalId];\\n\\t\\tbool proposalExecuted = proposal.executed;\\n\\t\\tbool proposalCanceled = proposal.canceled;\\n\\n\\t\\tif (proposalExecuted) {\\n\\t\\t\\treturn ProposalState.Executed;\\n\\t\\t}\\n\\n\\t\\tif (proposalCanceled) {\\n\\t\\t\\treturn ProposalState.Canceled;\\n\\t\\t}\\n\\n\\t\\tuint256 snapshot = proposalSnapshot(proposalId);\\n\\n\\t\\tif (snapshot == 0) {\\n\\t\\t\\trevert GovernorNonexistentProposal(proposalId);\\n\\t\\t}\\n\\n\\t\\tuint256 currentTimepoint = clock();\\n\\n\\t\\tif (snapshot >= currentTimepoint) {\\n\\t\\t\\treturn ProposalState.Pending;\\n\\t\\t}\\n\\n\\t\\tuint256 deadline = proposalDeadline(proposalId);\\n\\n\\t\\tif (deadline >= currentTimepoint) {\\n\\t\\t\\treturn ProposalState.Active;\\n\\t\\t} else if (!_quorumReached(proposalId) || !_voteSucceeded(proposalId)) {\\n\\t\\t\\treturn ProposalState.Defeated;\\n\\t\\t} else if (proposalEta(proposalId) == 0) {\\n\\t\\t\\treturn ProposalState.Succeeded;\\n\\t\\t} else {\\n\\t\\t\\treturn ProposalState.Queued;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-proposalThreshold}.\\n\\t */\\n\\tfunction proposalThreshold() public view virtual returns (uint256) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-proposalSnapshot}.\\n\\t */\\n\\tfunction proposalSnapshot(\\n\\t\\tuint256 proposalId\\n\\t) public view virtual returns (uint256) {\\n\\t\\treturn _proposals[proposalId].voteStart;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-proposalDeadline}.\\n\\t */\\n\\tfunction proposalDeadline(\\n\\t\\tuint256 proposalId\\n\\t) public view virtual returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t_proposals[proposalId].voteStart +\\n\\t\\t\\t_proposals[proposalId].voteDuration;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-proposalProposer}.\\n\\t */\\n\\tfunction proposalProposer(\\n\\t\\tuint256 proposalId\\n\\t) public view virtual returns (address) {\\n\\t\\treturn _proposals[proposalId].proposer;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-proposalEta}.\\n\\t */\\n\\tfunction proposalEta(\\n\\t\\tuint256 proposalId\\n\\t) public view virtual returns (uint256) {\\n\\t\\treturn _proposals[proposalId].etaSeconds;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-proposalNeedsQueuing}.\\n\\t */\\n\\tfunction proposalNeedsQueuing(uint256) public view virtual returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Reverts if the `msg.sender` is not the executor. In case the executor is not this contract\\n\\t * itself, the function reverts if `msg.data` is not whitelisted as a result of an {execute}\\n\\t * operation. See {onlyGovernance}.\\n\\t */\\n\\tfunction _checkGovernance() internal virtual {\\n\\t\\tif (_executor() != _msgSender()) {\\n\\t\\t\\trevert GovernorOnlyExecutor(_msgSender());\\n\\t\\t}\\n\\t\\tif (_executor() != address(this)) {\\n\\t\\t\\tbytes32 msgDataHash = keccak256(_msgData());\\n\\t\\t\\t// loop until popping the expected operation - throw if deque is empty (operation not authorized)\\n\\t\\t\\twhile (_governanceCall.popFront() != msgDataHash) {}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Amount of votes already cast passes the threshold limit.\\n\\t */\\n\\tfunction _quorumReached(\\n\\t\\tuint256 proposalId\\n\\t) internal view virtual returns (bool);\\n\\n\\t/**\\n\\t * @dev Is the proposal successful or not.\\n\\t */\\n\\tfunction _voteSucceeded(\\n\\t\\tuint256 proposalId\\n\\t) internal view virtual returns (bool);\\n\\n\\t/**\\n\\t * @dev Get the voting weight of `account` at a specific `timepoint`, for a vote as described by `params`.\\n\\t */\\n\\tfunction _getVotes(\\n\\t\\taddress account,\\n\\t\\tuint256 timepoint,\\n\\t\\tbytes memory params\\n\\t) internal view virtual returns (uint256);\\n\\n\\t/**\\n\\t * @dev Register a vote for `proposalId` by `account` with a given `support`, voting `weight` and voting `params`.\\n\\t *\\n\\t * Note: Support is generic and can represent various things depending on the voting system used.\\n\\t */\\n\\tfunction _countVote(\\n\\t\\tuint256 proposalId,\\n\\t\\taddress account,\\n\\t\\tuint8 support,\\n\\t\\tuint256 weight,\\n\\t\\tbytes memory params\\n\\t) internal virtual;\\n\\n\\t/**\\n\\t * @dev Default additional encoded parameters used by castVote methods that don't include them\\n\\t *\\n\\t * Note: Should be overridden by specific implementations to use an appropriate value, the\\n\\t * meaning of the additional params, in the context of that implementation\\n\\t */\\n\\tfunction _defaultParams() internal view virtual returns (bytes memory) {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\\n\\t */\\n\\tfunction propose(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tstring memory description\\n\\t) public virtual returns (uint256) {\\n\\t\\taddress proposer = _msgSender();\\n\\n\\t\\t// check description restriction\\n\\t\\tif (!_isValidDescriptionForProposer(proposer, description)) {\\n\\t\\t\\trevert GovernorRestrictedProposer(proposer);\\n\\t\\t}\\n\\n\\t\\t// check proposal threshold\\n\\t\\tuint256 proposerVotes = getVotes(proposer, clock() - 1);\\n\\t\\tuint256 votesThreshold = proposalThreshold();\\n\\t\\tif (proposerVotes < votesThreshold) {\\n\\t\\t\\trevert GovernorInsufficientProposerVotes(\\n\\t\\t\\t\\tproposer,\\n\\t\\t\\t\\tproposerVotes,\\n\\t\\t\\t\\tvotesThreshold\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn _propose(targets, values, calldatas, description, proposer);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal propose mechanism. Can be overridden to add more logic on proposal creation.\\n\\t *\\n\\t * Emits a {IGovernor-ProposalCreated} event.\\n\\t */\\n\\tfunction _propose(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tstring memory description,\\n\\t\\taddress proposer\\n\\t) internal virtual returns (uint256 proposalId) {\\n\\t\\tproposalId = hashProposal(\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tkeccak256(bytes(description))\\n\\t\\t);\\n\\n\\t\\tif (\\n\\t\\t\\ttargets.length != values.length ||\\n\\t\\t\\ttargets.length != calldatas.length ||\\n\\t\\t\\ttargets.length == 0\\n\\t\\t) {\\n\\t\\t\\trevert GovernorInvalidProposalLength(\\n\\t\\t\\t\\ttargets.length,\\n\\t\\t\\t\\tcalldatas.length,\\n\\t\\t\\t\\tvalues.length\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (_proposals[proposalId].voteStart != 0) {\\n\\t\\t\\trevert GovernorUnexpectedProposalState(\\n\\t\\t\\t\\tproposalId,\\n\\t\\t\\t\\tstate(proposalId),\\n\\t\\t\\t\\tbytes32(0)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tuint256 snapshot = clock() + votingDelay();\\n\\t\\tuint256 duration = votingPeriod();\\n\\n\\t\\tProposalCore storage proposal = _proposals[proposalId];\\n\\t\\tproposal.proposer = proposer;\\n\\t\\tproposal.voteStart = SafeCast.toUint48(snapshot);\\n\\t\\tproposal.voteDuration = SafeCast.toUint32(duration);\\n\\n\\t\\temit ProposalCreated(\\n\\t\\t\\tproposalId,\\n\\t\\t\\tproposer,\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tnew string[](targets.length),\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tsnapshot,\\n\\t\\t\\tsnapshot + duration,\\n\\t\\t\\tdescription\\n\\t\\t);\\n\\n\\t\\t// Using a named return variable to avoid stack too deep errors\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-queue}.\\n\\t */\\n\\tfunction queue(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tbytes32 descriptionHash\\n\\t) public virtual returns (uint256) {\\n\\t\\tuint256 proposalId = hashProposal(\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tdescriptionHash\\n\\t\\t);\\n\\n\\t\\t_validateStateBitmap(\\n\\t\\t\\tproposalId,\\n\\t\\t\\t_encodeStateBitmap(ProposalState.Succeeded)\\n\\t\\t);\\n\\n\\t\\tuint48 etaSeconds = _queueOperations(\\n\\t\\t\\tproposalId,\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tdescriptionHash\\n\\t\\t);\\n\\n\\t\\tif (etaSeconds != 0) {\\n\\t\\t\\t_proposals[proposalId].etaSeconds = etaSeconds;\\n\\t\\t\\temit ProposalQueued(proposalId, etaSeconds);\\n\\t\\t} else {\\n\\t\\t\\trevert GovernorQueueNotImplemented();\\n\\t\\t}\\n\\n\\t\\treturn proposalId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal queuing mechanism. Can be overridden (without a super call) to modify the way queuing is\\n\\t * performed (for example adding a vault/timelock).\\n\\t *\\n\\t * This is empty by default, and must be overridden to implement queuing.\\n\\t *\\n\\t * This function returns a timestamp that describes the expected ETA for execution. If the returned value is 0\\n\\t * (which is the default value), the core will consider queueing did not succeed, and the public {queue} function\\n\\t * will revert.\\n\\t *\\n\\t * NOTE: Calling this function directly will NOT check the current state of the proposal, or emit the\\n\\t * `ProposalQueued` event. Queuing a proposal should be done using {queue}.\\n\\t */\\n\\tfunction _queueOperations(\\n\\t\\tuint256 /*proposalId*/,\\n\\t\\taddress[] memory /*targets*/,\\n\\t\\tuint256[] memory /*values*/,\\n\\t\\tbytes[] memory /*calldatas*/,\\n\\t\\tbytes32 /*descriptionHash*/\\n\\t) internal virtual returns (uint48) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-execute}.\\n\\t */\\n\\tfunction execute(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tbytes32 descriptionHash\\n\\t) public payable virtual returns (uint256) {\\n\\t\\tuint256 proposalId = hashProposal(\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tdescriptionHash\\n\\t\\t);\\n\\n\\t\\t_validateStateBitmap(\\n\\t\\t\\tproposalId,\\n\\t\\t\\t_encodeStateBitmap(ProposalState.Succeeded) |\\n\\t\\t\\t\\t_encodeStateBitmap(ProposalState.Queued)\\n\\t\\t);\\n\\n\\t\\t// mark as executed before calls to avoid reentrancy\\n\\t\\t_proposals[proposalId].executed = true;\\n\\n\\t\\t// before execute: register governance call in queue.\\n\\t\\tif (_executor() != address(this)) {\\n\\t\\t\\tfor (uint256 i = 0; i < targets.length; ++i) {\\n\\t\\t\\t\\tif (targets[i] == address(this)) {\\n\\t\\t\\t\\t\\t_governanceCall.pushBack(keccak256(calldatas[i]));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_executeOperations(\\n\\t\\t\\tproposalId,\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tdescriptionHash\\n\\t\\t);\\n\\n\\t\\t// after execute: cleanup governance call queue.\\n\\t\\tif (_executor() != address(this) && !_governanceCall.empty()) {\\n\\t\\t\\t_governanceCall.clear();\\n\\t\\t}\\n\\n\\t\\temit ProposalExecuted(proposalId);\\n\\n\\t\\treturn proposalId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal execution mechanism. Can be overridden (without a super call) to modify the way execution is\\n\\t * performed (for example adding a vault/timelock).\\n\\t *\\n\\t * NOTE: Calling this function directly will NOT check the current state of the proposal, set the executed flag to\\n\\t * true or emit the `ProposalExecuted` event. Executing a proposal should be done using {execute} or {_execute}.\\n\\t */\\n\\tfunction _executeOperations(\\n\\t\\tuint256 /* proposalId */,\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tbytes32 /*descriptionHash*/\\n\\t) internal virtual {\\n\\t\\tfor (uint256 i = 0; i < targets.length; ++i) {\\n\\t\\t\\t(bool success, bytes memory returndata) = targets[i].call{\\n\\t\\t\\t\\tvalue: values[i]\\n\\t\\t\\t}(calldatas[i]);\\n\\t\\t\\tAddress.verifyCallResult(success, returndata);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-cancel}.\\n\\t */\\n\\tfunction cancel(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tbytes32 descriptionHash\\n\\t) public virtual returns (uint256) {\\n\\t\\t// The proposalId will be recomputed in the `_cancel` call further down. However we need the value before we\\n\\t\\t// do the internal call, because we need to check the proposal state BEFORE the internal `_cancel` call\\n\\t\\t// changes it. The `hashProposal` duplication has a cost that is limited, and that we accept.\\n\\t\\tuint256 proposalId = hashProposal(\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tdescriptionHash\\n\\t\\t);\\n\\n\\t\\t// public cancel restrictions (on top of existing _cancel restrictions).\\n\\t\\t_validateStateBitmap(\\n\\t\\t\\tproposalId,\\n\\t\\t\\t_encodeStateBitmap(ProposalState.Pending)\\n\\t\\t);\\n\\t\\tif (_msgSender() != proposalProposer(proposalId)) {\\n\\t\\t\\trevert GovernorOnlyProposer(_msgSender());\\n\\t\\t}\\n\\n\\t\\treturn _cancel(targets, values, calldatas, descriptionHash);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal cancel mechanism with minimal restrictions. A proposal can be cancelled in any state other than\\n\\t * Canceled, Expired, or Executed. Once cancelled a proposal can't be re-submitted.\\n\\t *\\n\\t * Emits a {IGovernor-ProposalCanceled} event.\\n\\t */\\n\\tfunction _cancel(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tbytes32 descriptionHash\\n\\t) internal virtual returns (uint256) {\\n\\t\\tuint256 proposalId = hashProposal(\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tdescriptionHash\\n\\t\\t);\\n\\n\\t\\t_validateStateBitmap(\\n\\t\\t\\tproposalId,\\n\\t\\t\\tALL_PROPOSAL_STATES_BITMAP ^\\n\\t\\t\\t\\t_encodeStateBitmap(ProposalState.Canceled) ^\\n\\t\\t\\t\\t_encodeStateBitmap(ProposalState.Expired) ^\\n\\t\\t\\t\\t_encodeStateBitmap(ProposalState.Executed)\\n\\t\\t);\\n\\n\\t\\t_proposals[proposalId].canceled = true;\\n\\t\\temit ProposalCanceled(proposalId);\\n\\n\\t\\treturn proposalId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-getVotes}.\\n\\t */\\n\\tfunction getVotes(\\n\\t\\taddress account,\\n\\t\\tuint256 timepoint\\n\\t) public view virtual returns (uint256) {\\n\\t\\treturn _getVotes(account, timepoint, _defaultParams());\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-getVotesWithParams}.\\n\\t */\\n\\tfunction getVotesWithParams(\\n\\t\\taddress account,\\n\\t\\tuint256 timepoint,\\n\\t\\tbytes memory params\\n\\t) public view virtual returns (uint256) {\\n\\t\\treturn _getVotes(account, timepoint, params);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-castVote}.\\n\\t */\\n\\tfunction castVote(\\n\\t\\tuint256 proposalId,\\n\\t\\tuint8 support\\n\\t) public virtual returns (uint256) {\\n\\t\\taddress voter = _msgSender();\\n\\t\\treturn _castVote(proposalId, voter, support, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-castVoteWithReason}.\\n\\t */\\n\\tfunction castVoteWithReason(\\n\\t\\tuint256 proposalId,\\n\\t\\tuint8 support,\\n\\t\\tstring calldata reason\\n\\t) public virtual returns (uint256) {\\n\\t\\taddress voter = _msgSender();\\n\\t\\treturn _castVote(proposalId, voter, support, reason);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-castVoteWithReasonAndParams}.\\n\\t */\\n\\tfunction castVoteWithReasonAndParams(\\n\\t\\tuint256 proposalId,\\n\\t\\tuint8 support,\\n\\t\\tstring calldata reason,\\n\\t\\tbytes memory params\\n\\t) public virtual returns (uint256) {\\n\\t\\taddress voter = _msgSender();\\n\\t\\treturn _castVote(proposalId, voter, support, reason, params);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-castVoteBySig}.\\n\\t */\\n\\tfunction castVoteBySig(\\n\\t\\tuint256 proposalId,\\n\\t\\tuint8 support,\\n\\t\\taddress voter,\\n\\t\\tbytes memory signature\\n\\t) public virtual returns (uint256) {\\n\\t\\tbool valid = SignatureChecker.isValidSignatureNow(\\n\\t\\t\\tvoter,\\n\\t\\t\\t_hashTypedDataV4(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\tBALLOT_TYPEHASH,\\n\\t\\t\\t\\t\\t\\tproposalId,\\n\\t\\t\\t\\t\\t\\tsupport,\\n\\t\\t\\t\\t\\t\\tvoter,\\n\\t\\t\\t\\t\\t\\t_useNonce(voter)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t),\\n\\t\\t\\tsignature\\n\\t\\t);\\n\\n\\t\\tif (!valid) {\\n\\t\\t\\trevert GovernorInvalidSignature(voter);\\n\\t\\t}\\n\\n\\t\\treturn _castVote(proposalId, voter, support, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\\n\\t */\\n\\tfunction castVoteWithReasonAndParamsBySig(\\n\\t\\tuint256 proposalId,\\n\\t\\tuint8 support,\\n\\t\\taddress voter,\\n\\t\\tstring calldata reason,\\n\\t\\tbytes memory params,\\n\\t\\tbytes memory signature\\n\\t) public virtual returns (uint256) {\\n\\t\\tbool valid = SignatureChecker.isValidSignatureNow(\\n\\t\\t\\tvoter,\\n\\t\\t\\t_hashTypedDataV4(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\tEXTENDED_BALLOT_TYPEHASH,\\n\\t\\t\\t\\t\\t\\tproposalId,\\n\\t\\t\\t\\t\\t\\tsupport,\\n\\t\\t\\t\\t\\t\\tvoter,\\n\\t\\t\\t\\t\\t\\t_useNonce(voter),\\n\\t\\t\\t\\t\\t\\tkeccak256(bytes(reason)),\\n\\t\\t\\t\\t\\t\\tkeccak256(params)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t),\\n\\t\\t\\tsignature\\n\\t\\t);\\n\\n\\t\\tif (!valid) {\\n\\t\\t\\trevert GovernorInvalidSignature(voter);\\n\\t\\t}\\n\\n\\t\\treturn _castVote(proposalId, voter, support, reason, params);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n\\t * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\\n\\t *\\n\\t * Emits a {IGovernor-VoteCast} event.\\n\\t */\\n\\tfunction _castVote(\\n\\t\\tuint256 proposalId,\\n\\t\\taddress account,\\n\\t\\tuint8 support,\\n\\t\\tstring memory reason\\n\\t) internal virtual returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t_castVote(proposalId, account, support, reason, _defaultParams());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n\\t * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n\\t *\\n\\t * Emits a {IGovernor-VoteCast} event.\\n\\t */\\n\\tfunction _castVote(\\n\\t\\tuint256 proposalId,\\n\\t\\taddress account,\\n\\t\\tuint8 support,\\n\\t\\tstring memory reason,\\n\\t\\tbytes memory params\\n\\t) internal virtual returns (uint256) {\\n\\t\\t_validateStateBitmap(\\n\\t\\t\\tproposalId,\\n\\t\\t\\t_encodeStateBitmap(ProposalState.Active)\\n\\t\\t);\\n\\n\\t\\tuint256 weight = _getVotes(\\n\\t\\t\\taccount,\\n\\t\\t\\tproposalSnapshot(proposalId),\\n\\t\\t\\tparams\\n\\t\\t);\\n\\t\\t_countVote(proposalId, account, support, weight, params);\\n\\n\\t\\tif (params.length == 0) {\\n\\t\\t\\temit VoteCast(account, proposalId, support, weight, reason);\\n\\t\\t} else {\\n\\t\\t\\temit VoteCastWithParams(\\n\\t\\t\\t\\taccount,\\n\\t\\t\\t\\tproposalId,\\n\\t\\t\\t\\tsupport,\\n\\t\\t\\t\\tweight,\\n\\t\\t\\t\\treason,\\n\\t\\t\\t\\tparams\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn weight;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n\\t * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n\\t * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n\\t * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n\\t */\\n\\tfunction relay(\\n\\t\\taddress target,\\n\\t\\tuint256 value,\\n\\t\\tbytes calldata data\\n\\t) external payable virtual onlyGovernance {\\n\\t\\t(bool success, bytes memory returndata) = target.call{ value: value }(\\n\\t\\t\\tdata\\n\\t\\t);\\n\\t\\tAddress.verifyCallResult(success, returndata);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n\\t * through another contract such as a timelock.\\n\\t */\\n\\tfunction _executor() internal view virtual returns (address) {\\n\\t\\treturn address(this);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Receiver-onERC721Received}.\\n\\t * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes memory\\n\\t) public virtual returns (bytes4) {\\n\\t\\tif (_executor() != address(this)) {\\n\\t\\t\\trevert GovernorDisabledDeposit();\\n\\t\\t}\\n\\t\\treturn this.onERC721Received.selector;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155Receiver-onERC1155Received}.\\n\\t * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\\n\\t */\\n\\tfunction onERC1155Received(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tbytes memory\\n\\t) public virtual returns (bytes4) {\\n\\t\\tif (_executor() != address(this)) {\\n\\t\\t\\trevert GovernorDisabledDeposit();\\n\\t\\t}\\n\\t\\treturn this.onERC1155Received.selector;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n\\t * Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock).\\n\\t */\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256[] memory,\\n\\t\\tuint256[] memory,\\n\\t\\tbytes memory\\n\\t) public virtual returns (bytes4) {\\n\\t\\tif (_executor() != address(this)) {\\n\\t\\t\\trevert GovernorDisabledDeposit();\\n\\t\\t}\\n\\t\\treturn this.onERC1155BatchReceived.selector;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Encodes a `ProposalState` into a `bytes32` representation where each bit enabled corresponds to\\n\\t * the underlying position in the `ProposalState` enum. For example:\\n\\t *\\n\\t * 0x000...10000\\n\\t *   ^^^^^^------ ...\\n\\t *         ^----- Succeeded\\n\\t *          ^---- Defeated\\n\\t *           ^--- Canceled\\n\\t *            ^-- Active\\n\\t *             ^- Pending\\n\\t */\\n\\tfunction _encodeStateBitmap(\\n\\t\\tProposalState proposalState\\n\\t) internal pure returns (bytes32) {\\n\\t\\treturn bytes32(1 << uint8(proposalState));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Check that the current state of a proposal matches the requirements described by the `allowedStates` bitmap.\\n\\t * This bitmap should be built using `_encodeStateBitmap`.\\n\\t *\\n\\t * If requirements are not met, reverts with a {GovernorUnexpectedProposalState} error.\\n\\t */\\n\\tfunction _validateStateBitmap(\\n\\t\\tuint256 proposalId,\\n\\t\\tbytes32 allowedStates\\n\\t) private view returns (ProposalState) {\\n\\t\\tProposalState currentState = state(proposalId);\\n\\t\\tif (_encodeStateBitmap(currentState) & allowedStates == bytes32(0)) {\\n\\t\\t\\trevert GovernorUnexpectedProposalState(\\n\\t\\t\\t\\tproposalId,\\n\\t\\t\\t\\tcurrentState,\\n\\t\\t\\t\\tallowedStates\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn currentState;\\n\\t}\\n\\n\\t/*\\n\\t * @dev Check if the proposer is authorized to submit a proposal with the given description.\\n\\t *\\n\\t * If the proposal description ends with `#proposer=0x???`, where `0x???` is an address written as a hex string\\n\\t * (case insensitive), then the submission of this proposal will only be authorized to said address.\\n\\t *\\n\\t * This is used for frontrunning protection. By adding this pattern at the end of their proposal, one can ensure\\n\\t * that no other address can submit the same proposal. An attacker would have to either remove or change that part,\\n\\t * which would result in a different proposal id.\\n\\t *\\n\\t * If the description does not match this pattern, it is unrestricted and anyone can submit it. This includes:\\n\\t * - If the `0x???` part is not a valid hex string.\\n\\t * - If the `0x???` part is a valid hex string, but does not contain exactly 40 hex digits.\\n\\t * - If it ends with the expected suffix followed by newlines or other whitespace.\\n\\t * - If it ends with some other similar suffix, e.g. `#other=abc`.\\n\\t * - If it does not end with any such suffix.\\n\\t */\\n\\tfunction _isValidDescriptionForProposer(\\n\\t\\taddress proposer,\\n\\t\\tstring memory description\\n\\t) internal view virtual returns (bool) {\\n\\t\\tuint256 len = bytes(description).length;\\n\\n\\t\\t// Length is too short to contain a valid proposer suffix\\n\\t\\tif (len < 52) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// Extract what would be the `#proposer=0x` marker beginning the suffix\\n\\t\\tbytes12 marker;\\n\\t\\tassembly {\\n\\t\\t\\t// - Start of the string contents in memory = description + 32\\n\\t\\t\\t// - First character of the marker = len - 52\\n\\t\\t\\t//   - Length of \\\"#proposer=0x0000000000000000000000000000000000000000\\\" = 52\\n\\t\\t\\t// - We read the memory word starting at the first character of the marker:\\n\\t\\t\\t//   - (description + 32) + (len - 52) = description + (len - 20)\\n\\t\\t\\t// - Note: Solidity will ignore anything past the first 12 bytes\\n\\t\\t\\tmarker := mload(add(description, sub(len, 20)))\\n\\t\\t}\\n\\n\\t\\t// If the marker is not found, there is no proposer suffix to check\\n\\t\\tif (marker != bytes12(\\\"#proposer=0x\\\")) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// Parse the 40 characters following the marker as uint160\\n\\t\\tuint160 recovered = 0;\\n\\t\\tfor (uint256 i = len - 40; i < len; ++i) {\\n\\t\\t\\t(bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);\\n\\t\\t\\t// If any of the characters is not a hex digit, ignore the suffix entirely\\n\\t\\t\\tif (!isHex) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\trecovered = (recovered << 4) | value;\\n\\t\\t}\\n\\n\\t\\treturn recovered == uint160(proposer);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Try to parse a character from a string as a hex value. Returns `(true, value)` if the char is in\\n\\t * `[0-9a-fA-F]` and `(false, 0)` otherwise. Value is guaranteed to be in the range `0 <= value < 16`\\n\\t */\\n\\tfunction _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {\\n\\t\\tuint8 c = uint8(char);\\n\\t\\tunchecked {\\n\\t\\t\\t// Case 0-9\\n\\t\\t\\tif (47 < c && c < 58) {\\n\\t\\t\\t\\treturn (true, c - 48);\\n\\t\\t\\t}\\n\\t\\t\\t// Case A-F\\n\\t\\t\\telse if (64 < c && c < 71) {\\n\\t\\t\\t\\treturn (true, c - 55);\\n\\t\\t\\t}\\n\\t\\t\\t// Case a-f\\n\\t\\t\\telse if (96 < c && c < 103) {\\n\\t\\t\\t\\treturn (true, c - 87);\\n\\t\\t\\t}\\n\\t\\t\\t// Else: not a hex char\\n\\t\\t\\telse {\\n\\t\\t\\t\\treturn (false, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc IERC6372\\n\\t */\\n\\tfunction clock() public view virtual returns (uint48);\\n\\n\\t/**\\n\\t * @inheritdoc IERC6372\\n\\t */\\n\\t// solhint-disable-next-line func-name-mixedcase\\n\\tfunction CLOCK_MODE() public view virtual returns (string memory);\\n\\n\\t/**\\n\\t * @inheritdoc IGovernor\\n\\t */\\n\\tfunction votingDelay() public view virtual returns (uint256);\\n\\n\\t/**\\n\\t * @inheritdoc IGovernor\\n\\t */\\n\\tfunction votingPeriod() public view virtual returns (uint256);\\n\\n\\t/**\\n\\t * @inheritdoc IGovernor\\n\\t */\\n\\tfunction quorum(uint256 timepoint) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x03cb88321ff1f48f5453df568f0a73910d0a6c4b53ec99d5a80652e28710774d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC6372} from \\\"../interfaces/IERC6372.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n */\\ninterface IGovernor is IERC165, IERC6372 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Empty proposal or a mismatch between the parameters length for a proposal call.\\n     */\\n    error GovernorInvalidProposalLength(uint256 targets, uint256 calldatas, uint256 values);\\n\\n    /**\\n     * @dev The vote was already cast.\\n     */\\n    error GovernorAlreadyCastVote(address voter);\\n\\n    /**\\n     * @dev Token deposits are disabled in this contract.\\n     */\\n    error GovernorDisabledDeposit();\\n\\n    /**\\n     * @dev The `account` is not a proposer.\\n     */\\n    error GovernorOnlyProposer(address account);\\n\\n    /**\\n     * @dev The `account` is not the governance executor.\\n     */\\n    error GovernorOnlyExecutor(address account);\\n\\n    /**\\n     * @dev The `proposalId` doesn't exist.\\n     */\\n    error GovernorNonexistentProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The current state of a proposal is not the required for performing an operation.\\n     * The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position\\n     * counting from right to left.\\n     *\\n     * NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist).\\n     * This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated).\\n     *\\n     * See {Governor-_encodeStateBitmap}.\\n     */\\n    error GovernorUnexpectedProposalState(uint256 proposalId, ProposalState current, bytes32 expectedStates);\\n\\n    /**\\n     * @dev The voting period set is not a valid period.\\n     */\\n    error GovernorInvalidVotingPeriod(uint256 votingPeriod);\\n\\n    /**\\n     * @dev The `proposer` does not have the required votes to create a proposal.\\n     */\\n    error GovernorInsufficientProposerVotes(address proposer, uint256 votes, uint256 threshold);\\n\\n    /**\\n     * @dev The `proposer` is not allowed to create a proposal.\\n     */\\n    error GovernorRestrictedProposer(address proposer);\\n\\n    /**\\n     * @dev The vote type used is not valid for the corresponding counting module.\\n     */\\n    error GovernorInvalidVoteType();\\n\\n    /**\\n     * @dev Queue operation is not implemented for this governor. Execute should be called directly.\\n     */\\n    error GovernorQueueNotImplemented();\\n\\n    /**\\n     * @dev The proposal hasn't been queued yet.\\n     */\\n    error GovernorNotQueuedProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The proposal has already been queued.\\n     */\\n    error GovernorAlreadyQueuedProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The provided signature is not valid for the expected `voter`.\\n     * If the `voter` is a contract, the signature is not valid using {IERC1271-isValidSignature}.\\n     */\\n    error GovernorInvalidSignature(address voter);\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is queued.\\n     */\\n    event ProposalQueued(uint256 proposalId, uint256 etaSeconds);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their interpepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() external view returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() external view returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external pure returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) external view returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The number of votes required in order for a voter to become a proposer.\\n     */\\n    function proposalThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\\n     * following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\\n     * possible to cast a vote during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The account that created a proposal.\\n     */\\n    function proposalProposer(uint256 proposalId) external view returns (address);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The time when a queued proposal becomes executable (\\\"ETA\\\"). Unlike {proposalSnapshot} and\\n     * {proposalDeadline}, this doesn't use the governor clock, and instead relies on the executor's clock which may be\\n     * different. In most cases this will be a timestamp.\\n     */\\n    function proposalEta(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Whether a proposal needs to be queued before execution.\\n     */\\n    function proposalNeedsQueuing(uint256 proposalId) external view returns (bool);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\\n     * on the clock (see EIP-6372) this contract uses.\\n     *\\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\\n     * proposal starts.\\n     *\\n     * NOTE: While this interface returns a uint256, timepoints are stored as uint48 following the ERC-6372 clock type.\\n     * Consequently this value must fit in a uint48 (when added to the current clock). See {IERC6372-clock}.\\n     */\\n    function votingDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock\\n     * (see EIP-6372) this contract uses.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     *\\n     * NOTE: This value is stored when the proposal is submitted so that possible changes to the value do not affect\\n     * proposals that have already been submitted. The type used to save it is a uint32. Consequently, while this\\n     * interface returns a uint256, the value it returns should fit in a uint32.\\n     */\\n    function votingPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\\n     * duration specified by {IGovernor-votingPeriod}.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Queue a proposal. Some governors require this step to be performed before execution can happen. If queuing\\n     * is not necessary, this function may revert.\\n     * Queuing a proposal requires the quorum to be reached, the vote to be successful, and the deadline to be reached.\\n     *\\n     * Emits a {ProposalQueued} event.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached. Depending on the governor it might also be required that the proposal was queued and\\n     * that some delay passed.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * NOTE: Some modules can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external payable returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\\n     * before the vote starts.\\n     *\\n     * Emits a {ProposalCanceled} event.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the voter's signature, including ERC-1271 signature support.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        bytes memory signature\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the voter's signature,\\n     * including ERC-1271 signature support.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        string calldata reason,\\n        bytes memory params,\\n        bytes memory signature\\n    ) external returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x0a6c99ff573c20b62b8c568282517664e6d55000d4302aad10c668c97c0d2e0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Governor} from \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address voter => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 proposalId => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(\\n        uint256 proposalId\\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory // params\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        if (proposalVote.hasVoted[account]) {\\n            revert GovernorAlreadyCastVote(account);\\n        }\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert GovernorInvalidVoteType();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c9ef54955aadafa3bac0ee7c40b2f1a164b4f3c2a72e1cb52043f664a85c15c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Governor} from \\\"../Governor.sol\\\";\\nimport {IVotes} from \\\"../utils/IVotes.sol\\\";\\nimport {IERC5805} from \\\"../../interfaces/IERC5805.sol\\\";\\nimport {SafeCast} from \\\"../../utils/math/SafeCast.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes}\\n * token.\\n */\\nabstract contract GovernorVotes is Governor {\\n    IERC5805 private immutable _token;\\n\\n    constructor(IVotes tokenAddress) {\\n        _token = IERC5805(address(tokenAddress));\\n    }\\n\\n    /**\\n     * @dev The token that voting power is sourced from.\\n     */\\n    function token() public view virtual returns (IERC5805) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @dev Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token\\n     * does not implement EIP-6372.\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        try token().clock() returns (uint48 timepoint) {\\n            return timepoint;\\n        } catch {\\n            return Time.blockNumber();\\n        }\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        try token().CLOCK_MODE() returns (string memory clockmode) {\\n            return clockmode;\\n        } catch {\\n            return \\\"mode=blocknumber&from=default\\\";\\n        }\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token().getPastVotes(account, timepoint);\\n    }\\n}\\n\",\"keccak256\":\"0x3ac80e86633701fd0675df10770877da0cab60fb041553ddbc78c431e4a7c3cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {GovernorVotes} from \\\"./GovernorVotes.sol\\\";\\nimport {SafeCast} from \\\"../../utils/math/SafeCast.sol\\\";\\nimport {Checkpoints} from \\\"../../utils/structs/Checkpoints.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n */\\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    Checkpoints.Trace208 private _quorumNumeratorHistory;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev The quorum set is not a valid fraction.\\n     */\\n    error GovernorInvalidQuorumFraction(uint256 quorumNumerator, uint256 quorumDenominator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    constructor(uint256 quorumNumeratorValue) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumeratorHistory.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\\n     */\\n    function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\\n\\n        // Optimistic search, check the latest checkpoint\\n        Checkpoints.Checkpoint208 storage latest = _quorumNumeratorHistory._checkpoints[length - 1];\\n        uint48 latestKey = latest._key;\\n        uint208 latestValue = latest._value;\\n        if (latestKey <= timepoint) {\\n            return latestValue;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return _quorumNumeratorHistory.upperLookupRecent(SafeCast.toUint48(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 timepoint) public view virtual override returns (uint256) {\\n        return (token().getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        uint256 denominator = quorumDenominator();\\n        if (newQuorumNumerator > denominator) {\\n            revert GovernorInvalidQuorumFraction(newQuorumNumerator, denominator);\\n        }\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n        _quorumNumeratorHistory.push(clock(), SafeCast.toUint208(newQuorumNumerator));\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\\n\",\"keccak256\":\"0x5b5cdb361ed018c0162942d673c17e187c1a52ded2ce4f41e8a3f3f5d1656e00\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n */\\ninterface IVotes {\\n    /**\\n     * @dev The signature used has expired.\\n     */\\n    error VotesExpiredSignature(uint256 expiry);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IVotes} from \\\"../governance/utils/IVotes.sol\\\";\\nimport {IERC6372} from \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\",\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```solidity\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error QueueEmpty();\\n\\n    /**\\n     * @dev A push operation couldn't be completed due to the queue being full.\\n     */\\n    error QueueFull();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error QueueOutOfBounds();\\n\\n    /**\\n     * @dev Indices are 128 bits so begin and end are packed in a single storage slot for efficient access.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\\n     */\\n    struct Bytes32Deque {\\n        uint128 _begin;\\n        uint128 _end;\\n        mapping(uint128 index => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     *\\n     * Reverts with {QueueFull} if the queue is full.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        unchecked {\\n            uint128 backIndex = deque._end;\\n            if (backIndex + 1 == deque._begin) revert QueueFull();\\n            deque._data[backIndex] = value;\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with {QueueEmpty} if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        unchecked {\\n            uint128 backIndex = deque._end;\\n            if (backIndex == deque._begin) revert QueueEmpty();\\n            --backIndex;\\n            value = deque._data[backIndex];\\n            delete deque._data[backIndex];\\n            deque._end = backIndex;\\n        }\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     *\\n     * Reverts with {QueueFull} if the queue is full.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        unchecked {\\n            uint128 frontIndex = deque._begin - 1;\\n            if (frontIndex == deque._end) revert QueueFull();\\n            deque._data[frontIndex] = value;\\n            deque._begin = frontIndex;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `QueueEmpty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        unchecked {\\n            uint128 frontIndex = deque._begin;\\n            if (frontIndex == deque._end) revert QueueEmpty();\\n            value = deque._data[frontIndex];\\n            delete deque._data[frontIndex];\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `QueueEmpty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert QueueEmpty();\\n        return deque._data[deque._begin];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `QueueEmpty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert QueueEmpty();\\n        unchecked {\\n            return deque._data[deque._end - 1];\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `QueueOutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        if (index >= length(deque)) revert QueueOutOfBounds();\\n        // By construction, length is a uint128, so the check above ensures that index can be safely downcast to uint128\\n        unchecked {\\n            return deque._data[deque._begin + uint128(index)];\\n        }\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        unchecked {\\n            return uint256(deque._end - deque._begin);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end == deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0xed6b702230a66640a0f1dd96106dd697e821b6b0fbb2eeab1c09d88d7c411a67\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"contracts/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/governance/Governor.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\\\";\\n\\ncontract NDCGovernor is\\n\\tGovernor,\\n\\tGovernorCountingSimple,\\n\\tGovernorVotes,\\n\\tGovernorVotesQuorumFraction\\n{\\n\\tconstructor(\\n\\t\\tIVotes _token\\n\\t) Governor(\\\"NDC\\\") GovernorVotes(_token) GovernorVotesQuorumFraction(4) {}\\n\\n\\tfunction votingDelay() public pure override returns (uint256) {\\n\\t\\treturn 0; // 0 seconds\\n\\t}\\n\\n\\tfunction votingPeriod() public pure override returns (uint256) {\\n\\t\\treturn 50400; // 1 week\\n\\t}\\n\\n\\t// The following functions are overrides required by Solidity.\\n\\n\\tfunction quorum(\\n\\t\\tuint256 blockNumber\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(Governor, GovernorVotesQuorumFraction)\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn super.quorum(blockNumber);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0046ca844dc570bf3417be9ec1a3a4dd5bb0283ac7e60bdf6b1766f919a7856d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b506040516200416b3803806200416b83398101604081905262000035916200059e565b600481604051806040016040528060038152602001624e444360e81b81525080620000656200014a60201b60201c565b6200007282600062000165565b610120526200008381600162000165565b61014052815160208084019190912060e052815190820120610100524660a0526200011160e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c05260036200012882826200066e565b50506001600160a01b03166101605262000142816200019e565b5050620007fb565b6040805180820190915260018152603160f81b602082015290565b600060208351101562000185576200017d8362000242565b905062000198565b816200019284826200066e565b5060ff90505b92915050565b606480821115620001d15760405163243e544560e01b815260048101839052602481018290526044015b60405180910390fd5b6000620001dd62000285565b905062000202620001ed620002a1565b620001f88562000323565b600891906200035d565b505060408051828152602081018590527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a1505050565b600080829050601f8151111562000270578260405163305a27a960e01b8152600401620001c891906200073a565b80516200027d826200078a565b179392505050565b60006200029360086200037a565b6001600160d01b0316905090565b6000620002ae6101605190565b6001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156200030a575060408051601f3d908101601f191682019092526200030791810190620007af565b60015b6200031e5762000319620003ca565b905090565b919050565b60006001600160d01b0382111562000359576040516306dfcc6560e41b815260d0600482015260248101839052604401620001c8565b5090565b6000806200036d858585620003d7565b915091505b935093915050565b80546000908015620003c057620003a68362000398600184620007d9565b600091825260209091200190565b54660100000000000090046001600160d01b0316620003c3565b60005b9392505050565b6000620003194362000569565b8254600090819080156200050a576000620003f98762000398600185620007d9565b60408051808201909152905465ffffffffffff80821680845266010000000000009092046001600160d01b0316602084015291925090871610156200045157604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff808816911603620004a55784620004788862000398600186620007d9565b80546001600160d01b039290921666010000000000000265ffffffffffff909216919091179055620004f9565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d815291909120945191519092166601000000000000029216919091179101555b602001519250839150620003729050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316660100000000000002919093161792019190915590508162000372565b600065ffffffffffff82111562000359576040516306dfcc6560e41b81526030600482015260248101839052604401620001c8565b600060208284031215620005b157600080fd5b81516001600160a01b0381168114620003c357600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620005f457607f821691505b6020821081036200061557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200066957600081815260208120601f850160051c81016020861015620006445750805b601f850160051c820191505b81811015620006655782815560010162000650565b5050505b505050565b81516001600160401b038111156200068a576200068a620005c9565b620006a2816200069b8454620005df565b846200061b565b602080601f831160018114620006da5760008415620006c15750858301515b600019600386901b1c1916600185901b17855562000665565b600085815260208120601f198616915b828110156200070b57888601518255948401946001909101908401620006ea565b50858210156200072a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b8181101562000769578581018301518582016040015282016200074b565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620006155760001960209190910360031b1b16919050565b600060208284031215620007c257600080fd5b815165ffffffffffff81168114620003c357600080fd5b818103818111156200019857634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051610100516101205161014051610160516138ee6200087d600039600081816108dc01528181610d3e0152818161124401528181611d650152611e7701526000611d3001526000611d030152600061209d0152600061207501526000611fd001526000611ffa0152600061202401526138ee6000f3fe6080604052600436106102605760003560e01c80637b3c71d311610144578063b58131b0116100b6578063dd4e2ba51161007a578063dd4e2ba5146107e7578063deaaa7cc1461082d578063eb9019d414610861578063f23a6e6114610881578063f8ce560a146108ad578063fc0c546a146108cd57600080fd5b8063b58131b01461041d578063bc197c8114610768578063c01f9e3714610794578063c28bc2fa146107b4578063c59057e4146107c757600080fd5b806391ddadf41161010857806391ddadf41461069a57806397c3d334146106c65780639a802a6d146106da578063a7713a70146106fa578063a9a952941461070f578063ab58fb8e1461073057600080fd5b80637b3c71d3146105dc5780637d5e81e2146105fc5780637ecebe001461061c57806384b0196e146106525780638ff262e31461067a57600080fd5b80633932abb1116101dd578063544ffc9c116101a1578063544ffc9c146104dd57806354fd4d5014610532578063567813881461055c5780635b8d0e0d1461057c5780635f398a141461059c57806360c4247f146105bc57600080fd5b80633932abb11461041d5780633e4f49e614610431578063438596321461045e578063452115d6146104a85780634bf5d7e9146104c857600080fd5b8063150b7a0211610224578063150b7a0214610352578063160cbed7146103965780632656227d146103b65780632d63f693146103c95780632fe3e261146103e957600080fd5b806301ffc9a71461026e57806302a251a3146102a357806306f3f9e6146102c257806306fdde03146102e2578063143489d01461030457600080fd5b3661026957005b005b600080fd5b34801561027a57600080fd5b5061028e610289366004612965565b610900565b60405190151581526020015b60405180910390f35b3480156102af57600080fd5b5061c4e05b60405190815260200161029a565b3480156102ce57600080fd5b506102676102dd36600461298f565b610952565b3480156102ee57600080fd5b506102f7610966565b60405161029a91906129f8565b34801561031057600080fd5b5061033a61031f36600461298f565b6000908152600460205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200161029a565b34801561035e57600080fd5b5061037d61036d366004612aed565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161029a565b3480156103a257600080fd5b506102b46103b1366004612cbe565b6109f8565b6102b46103c4366004612cbe565b610a38565b3480156103d557600080fd5b506102b46103e436600461298f565b610b6b565b3480156103f557600080fd5b506102b47f3e83946653575f9a39005e1545185629e92736b7528ab20ca3816f315424a81181565b34801561042957600080fd5b5060006102b4565b34801561043d57600080fd5b5061045161044c36600461298f565b610b8c565b60405161029a9190612d85565b34801561046a57600080fd5b5061028e610479366004612d93565b60008281526007602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104b457600080fd5b506102b46104c3366004612cbe565b610ccb565b3480156104d457600080fd5b506102f7610d3a565b3480156104e957600080fd5b506105176104f836600461298f565b6000908152600760205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161029a565b34801561053e57600080fd5b506040805180820190915260018152603160f81b60208201526102f7565b34801561056857600080fd5b506102b4610577366004612dd0565b610dfc565b34801561058857600080fd5b506102b4610597366004612e3b565b610e25565b3480156105a857600080fd5b506102b46105b7366004612ef3565b610f84565b3480156105c857600080fd5b506102b46105d736600461298f565b610fd9565b3480156105e857600080fd5b506102b46105f7366004612f76565b611067565b34801561060857600080fd5b506102b4610617366004612fcf565b6110af565b34801561062857600080fd5b506102b4610637366004613083565b6001600160a01b031660009081526002602052604090205490565b34801561065e57600080fd5b50610667611128565b60405161029a97969594939291906130d9565b34801561068657600080fd5b506102b4610695366004613149565b61116e565b3480156106a657600080fd5b506106af611240565b60405165ffffffffffff909116815260200161029a565b3480156106d257600080fd5b5060646102b4565b3480156106e657600080fd5b506102b46106f5366004613198565b6112cd565b34801561070657600080fd5b506102b46112da565b34801561071b57600080fd5b5061028e61072a36600461298f565b50600090565b34801561073c57600080fd5b506102b461074b36600461298f565b60009081526004602052604090206001015465ffffffffffff1690565b34801561077457600080fd5b5061037d6107833660046131ee565b63bc197c8160e01b95945050505050565b3480156107a057600080fd5b506102b46107af36600461298f565b6112f4565b6102676107c236600461327d565b611337565b3480156107d357600080fd5b506102b46107e2366004612cbe565b6113b7565b3480156107f357600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102f7565b34801561083957600080fd5b506102b47ff2aad550cf55f045cb27e9c559f9889fdfb6e6cdaa032301d6ea397784ae51d781565b34801561086d57600080fd5b506102b461087c3660046132be565b6113f1565b34801561088d57600080fd5b5061037d61089c3660046132e8565b63f23a6e6160e01b95945050505050565b3480156108b957600080fd5b506102b46108c836600461298f565b611419565b3480156108d957600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061033a565b60006001600160e01b031982166332a2ad4360e11b148061093157506001600160e01b03198216630271189760e51b145b8061094c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61095a611424565b6109638161145b565b50565b6060600380546109759061334c565b80601f01602080910402602001604051908101604052809291908181526020018280546109a19061334c565b80156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905090565b600080610a07868686866113b7565b9050610a1c81610a1760046114f1565b611514565b506000604051634844252360e11b815260040160405180910390fd5b600080610a47868686866113b7565b9050610a6781610a5760056114f1565b610a6160046114f1565b17611514565b506000818152600460205260409020805460ff60f01b1916600160f01b17905530610a8f3090565b6001600160a01b031614610b215760005b8651811015610b1f57306001600160a01b0316878281518110610ac557610ac5613386565b60200260200101516001600160a01b031603610b0f57610b0f858281518110610af057610af0613386565b602002602001015180519060200120600561155390919063ffffffff16565b610b18816133b2565b9050610aa0565b505b610b2e81878787876115c4565b6040518181527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f906020015b60405180910390a195945050505050565b600090815260046020526040902054600160a01b900465ffffffffffff1690565b6000818152600460205260408120805460ff600160f01b8204811691600160f81b9004168115610bc157506007949350505050565b8015610bd257506002949350505050565b6000610bdd86610b6b565b905080600003610c0857604051636ad0607560e01b8152600481018790526024015b60405180910390fd5b6000610c12611240565b65ffffffffffff169050808210610c30575060009695505050505050565b6000610c3b886112f4565b9050818110610c5257506001979650505050505050565b610c5b886116a4565b1580610c7b57506000888152600760205260409020805460019091015411155b15610c8e57506003979650505050505050565b60008881526004602052604090206001015465ffffffffffff16600003610cbd57506004979650505050505050565b506005979650505050505050565b600080610cda868686866113b7565b9050610cea81610a1760006114f1565b506000818152600460205260409020546001600160a01b03163314610d245760405163233d98e360e01b8152336004820152602401610bff565b610d30868686866116db565b9695505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bf5d7e96040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015610dbb57506040513d6000823e601f3d908101601f19168201604052610db891908101906133cb565b60015b610df7575060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b919050565b600080339050610e1d8482856040518060200160405280600081525061178c565b949350505050565b600080610f0887610f027f3e83946653575f9a39005e1545185629e92736b7528ab20ca3816f315424a8118c8c8c610e7a8e6001600160a01b0316600090815260026020526040902080546001810190915590565b8d8d604051610e8a929190613438565b60405180910390208c80519060200120604051602001610ee79796959493929190968752602087019590955260ff9390931660408601526001600160a01b03919091166060850152608084015260a083015260c082015260e00190565b604051602081830303815290604052805190602001206117b8565b856117e5565b905080610f33576040516394ab6c0760e01b81526001600160a01b0388166004820152602401610bff565b610f7789888a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b925061183d915050565b9998505050505050505050565b600080339050610fce87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061183d915050565b979650505050505050565b600880546000918290610fed600184613448565b81548110610ffd57610ffd613386565b6000918252602090912001805490915065ffffffffffff811690600160301b90046001600160d01b0316858211611040576001600160d01b031695945050505050565b61105461104c8761191a565b600890611951565b6001600160d01b03169695505050505050565b600080339050610d3086828787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061178c92505050565b6000336110bc8184611a06565b6110e45760405163d9b3955760e01b81526001600160a01b0382166004820152602401610bff565b600061110b8260016110f4611240565b6110fe919061345b565b65ffffffffffff166113f1565b9050600061111c8888888887611af7565b98975050505050505050565b60006060806000806000606061113c611cfc565b611144611d29565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6000806111fa84610f027ff2aad550cf55f045cb27e9c559f9889fdfb6e6cdaa032301d6ea397784ae51d78989896111c38b6001600160a01b0316600090815260026020526040902080546001810190915590565b60408051602081019690965285019390935260ff90911660608401526001600160a01b0316608083015260a082015260c001610ee7565b905080611225576040516394ab6c0760e01b81526001600160a01b0385166004820152602401610bff565b610d308685876040518060200160405280600081525061178c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156112bc575060408051601f3d908101601f191682019092526112b991810190613481565b60015b610df7576112c8611d56565b905090565b6000610e1d848484611d61565b60006112e66008611df7565b6001600160d01b0316905090565b60008181526004602052604081205461132990600160d01b810463ffffffff1690600160a01b900465ffffffffffff166134a9565b65ffffffffffff1692915050565b61133f611424565b600080856001600160a01b031685858560405161135d929190613438565b60006040518083038185875af1925050503d806000811461139a576040519150601f19603f3d011682016040523d82523d6000602084013e61139f565b606091505b50915091506113ae8282611e30565b50505050505050565b6000848484846040516020016113d09493929190613556565b60408051601f19818403018152919052805160209091012095945050505050565b6000611412838361140d60408051602081019091526000815290565b611d61565b9392505050565b600061094c82611e4c565b303314611446576040516347096e4760e01b8152336004820152602401610bff565b565b806114536005611ef6565b036114485750565b6064808211156114885760405163243e544560e01b81526004810183905260248101829052604401610bff565b60006114926112da565b90506114b161149f611240565b6114a885611f74565b60089190611fa8565b505060408051828152602081018590527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a1505050565b600081600781111561150557611505612d4d565b600160ff919091161b92915050565b60008061152084610b8c565b905060008361152e836114f1565b1603611412578381846040516331b75e4d60e01b8152600401610bff939291906135a1565b81546001600160801b03600160801b82048116918116600183019091160361158e57604051638acb5f2760e01b815260040160405180910390fd5b6001600160801b03808216600090815260018086016020526040909120939093558354919092018216600160801b029116179055565b60005b845181101561169c576000808683815181106115e5576115e5613386565b60200260200101516001600160a01b031686848151811061160857611608613386565b602002602001015186858151811061162257611622613386565b602002602001015160405161163791906135c3565b60006040518083038185875af1925050503d8060008114611674576040519150601f19603f3d011682016040523d82523d6000602084013e611679565b606091505b50915091506116888282611e30565b50505080611695906133b2565b90506115c7565b505050505050565b6000818152600760205260408120600281015460018201546116c691906135df565b6116d26108c885610b6b565b11159392505050565b6000806116ea868686866113b7565b9050611738816116fa60076114f1565b61170460066114f1565b61170e60026114f1565b600161171b6007826135f2565b6117269060026136ef565b6117309190613448565b181818611514565b506000818152600460205260409081902080546001600160f81b0316600160f81b179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610b5a9083815260200190565b60006117af858585856117aa60408051602081019091526000815290565b61183d565b95945050505050565b600061094c6117c5611fc3565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006117f485856120ee565b509092509050600081600381111561180e5761180e612d4d565b14801561182c5750856001600160a01b0316826001600160a01b0316145b80610d305750610d3086868661213b565b600061184d86610a1760016114f1565b5060006118638661185d89610b6b565b85611d61565b90506118728787878487612216565b82516000036118c757856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda4888784886040516118ba94939291906136fe565b60405180910390a2610d30565b856001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128887848888604051611908959493929190613726565b60405180910390a29695505050505050565b600065ffffffffffff82111561194d576040516306dfcc6560e41b81526030600482015260248101839052604401610bff565b5090565b8154600090818160058111156119b057600061196c8461230f565b6119769085613448565b60008881526020902090915081015465ffffffffffff90811690871610156119a0578091506119ae565b6119ab8160016135df565b92505b505b60006119be878785856123f7565b905080156119f9576119e3876119d5600184613448565b600091825260209091200190565b54600160301b90046001600160d01b0316610fce565b6000979650505050505050565b80516000906034811015611a1e57600191505061094c565b82810160131901516001600160a01b031981166b046e0e4dee0dee6cae47a60f60a31b14611a515760019250505061094c565b600080611a5f602885613448565b90505b83811015611ad657600080611a96888481518110611a8257611a82613386565b01602001516001600160f81b031916612459565b9150915081611aae576001965050505050505061094c565b8060ff166004856001600160a01b0316901b179350505080611acf906133b2565b9050611a62565b50856001600160a01b0316816001600160a01b031614935050505092915050565b6000611b0c86868686805190602001206113b7565b905084518651141580611b2157508351865114155b80611b2b57508551155b15611b6057855184518651604051630447b05d60e41b8152600481019390935260248301919091526044820152606401610bff565b600081815260046020526040902054600160a01b900465ffffffffffff1615611bab5780611b8d82610b8c565b6040516331b75e4d60e01b8152610bff9291906000906004016135a1565b600080611bb6611240565b65ffffffffffff16611bc891906135df565b9050600061c4e0600084815260046020526040902080546001600160a01b0319166001600160a01b038716178155909150611c028361191a565b815465ffffffffffff91909116600160a01b0265ffffffffffff60a01b19909116178155611c2f826124eb565b815463ffffffff91909116600160d01b0263ffffffff60d01b1990911617815588517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e090859087908c908c906001600160401b03811115611c9257611c92612a22565b604051908082528060200260200182016040528015611cc557816020015b6060815260200190600190039081611cb05790505b508c89611cd28a826135df565b8e604051611ce899989796959493929190613760565b60405180910390a150505095945050505050565b60606112c87f0000000000000000000000000000000000000000000000000000000000000000600061251c565b60606112c87f0000000000000000000000000000000000000000000000000000000000000000600161251c565b60006112c84361191a565b60007f0000000000000000000000000000000000000000000000000000000000000000604051630748d63560e31b81526001600160a01b038681166004830152602482018690529190911690633a46b1a890604401602060405180830381865afa158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d9190613837565b80546000908015611e2757611e11836119d5600184613448565b54600160301b90046001600160d01b0316611412565b60009392505050565b606082611e4557611e40826125c7565b61094c565b508061094c565b60006064611e5983610fd9565b604051632394e7a360e21b8152600481018590526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638e539e8c90602401602060405180830381865afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee29190613837565b611eec9190613850565b61094c919061387d565b80546000906001600160801b0380821691600160801b9004168103611f2e576040516375e52f4f60e01b815260040160405180910390fd5b6001600160801b038181166000908152600185810160205260408220805492905585546fffffffffffffffffffffffffffffffff19169301909116919091179092555090565b60006001600160d01b0382111561194d576040516306dfcc6560e41b815260d0600482015260248101839052604401610bff565b600080611fb68585856125f0565b915091505b935093915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561201c57507f000000000000000000000000000000000000000000000000000000000000000046145b1561204657507f000000000000000000000000000000000000000000000000000000000000000090565b6112c8604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080600083516041036121285760208401516040850151606086015160001a61211a8882858561276a565b955095509550505050612134565b50508151600091506002905b9250925092565b6000806000856001600160a01b0316858560405160240161215d92919061389f565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b1790525161219291906135c3565b600060405180830381855afa9150503d80600081146121cd576040519150601f19603f3d011682016040523d82523d6000602084013e6121d2565b606091505b50915091508180156121e657506020815110155b8015610d3057508051630b135d3f60e11b9061220b9083016020908101908401613837565b149695505050505050565b60008581526007602090815260408083206001600160a01b0388168452600381019092529091205460ff161561226a576040516371c6af4960e01b81526001600160a01b0386166004820152602401610bff565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff84166122b657828160000160008282546122ab91906135df565b9091555061169c9050565b60001960ff8516016122d657828160010160008282546122ab91906135df565b60011960ff8516016122f657828160020160008282546122ab91906135df565b6040516303599be160e11b815260040160405180910390fd5b60008160000361232157506000919050565b6000600161232e84612839565b901c6001901b9050600181848161234757612347613867565b048201901c9050600181848161235f5761235f613867565b048201901c9050600181848161237757612377613867565b048201901c9050600181848161238f5761238f613867565b048201901c905060018184816123a7576123a7613867565b048201901c905060018184816123bf576123bf613867565b048201901c905060018184816123d7576123d7613867565b048201901c9050611412818285816123f1576123f1613867565b046128cd565b60005b8183101561245157600061240e84846128e3565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff16111561243d5780925061244b565b6124488160016135df565b93505b506123fa565b509392505050565b60008060f883901c602f811180156124745750603a8160ff16105b1561248957600194602f199091019350915050565b8060ff16604010801561249f575060478160ff16105b156124b4576001946036199091019350915050565b8060ff1660601080156124ca575060678160ff16105b156124df576001946056199091019350915050565b50600093849350915050565b600063ffffffff82111561194d576040516306dfcc6560e41b81526020600482015260248101839052604401610bff565b606060ff83146125365761252f836128fe565b905061094c565b8180546125429061334c565b80601f016020809104026020016040519081016040528092919081815260200182805461256e9061334c565b80156125bb5780601f10612590576101008083540402835291602001916125bb565b820191906000526020600020905b81548152906001019060200180831161259e57829003601f168201915b5050505050905061094c565b8051156125d75780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b82546000908190801561270f57600061260e876119d5600185613448565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b03166020840152919250908716101561266257604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff8088169116036126ae5784612685886119d5600186613448565b80546001600160d01b0392909216600160301b0265ffffffffffff9092169190911790556126ff565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b602001519250839150611fbb9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081611fbb565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156127a5575060009150600390508261282f565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156127f9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128255750600092506001915082905061282f565b9250600091508190505b9450945094915050565b600080608083901c1561284e57608092831c92015b604083901c1561286057604092831c92015b602083901c1561287257602092831c92015b601083901c1561288457601092831c92015b600883901c1561289657600892831c92015b600483901c156128a857600492831c92015b600283901c156128ba57600292831c92015b600183901c1561094c5760010192915050565b60008183106128dc5781611412565b5090919050565b60006128f2600284841861387d565b611412908484166135df565b6060600061290b8361293d565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f81111561094c57604051632cd44ac360e21b815260040160405180910390fd5b60006020828403121561297757600080fd5b81356001600160e01b03198116811461141257600080fd5b6000602082840312156129a157600080fd5b5035919050565b60005b838110156129c35781810151838201526020016129ab565b50506000910152565b600081518084526129e48160208601602086016129a8565b601f01601f19169290920160200192915050565b60208152600061141260208301846129cc565b80356001600160a01b0381168114610df757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a6057612a60612a22565b604052919050565b60006001600160401b03821115612a8157612a81612a22565b50601f01601f191660200190565b6000612aa2612a9d84612a68565b612a38565b9050828152838383011115612ab657600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ade57600080fd5b61141283833560208501612a8f565b60008060008060808587031215612b0357600080fd5b612b0c85612a0b565b9350612b1a60208601612a0b565b92506040850135915060608501356001600160401b03811115612b3c57600080fd5b612b4887828801612acd565b91505092959194509250565b60006001600160401b03821115612b6d57612b6d612a22565b5060051b60200190565b600082601f830112612b8857600080fd5b81356020612b98612a9d83612b54565b82815260059290921b84018101918181019086841115612bb757600080fd5b8286015b84811015612bd957612bcc81612a0b565b8352918301918301612bbb565b509695505050505050565b600082601f830112612bf557600080fd5b81356020612c05612a9d83612b54565b82815260059290921b84018101918181019086841115612c2457600080fd5b8286015b84811015612bd95780358352918301918301612c28565b600082601f830112612c5057600080fd5b81356020612c60612a9d83612b54565b82815260059290921b84018101918181019086841115612c7f57600080fd5b8286015b84811015612bd95780356001600160401b03811115612ca25760008081fd5b612cb08986838b0101612acd565b845250918301918301612c83565b60008060008060808587031215612cd457600080fd5b84356001600160401b0380821115612ceb57600080fd5b612cf788838901612b77565b95506020870135915080821115612d0d57600080fd5b612d1988838901612be4565b94506040870135915080821115612d2f57600080fd5b50612d3c87828801612c3f565b949793965093946060013593505050565b634e487b7160e01b600052602160045260246000fd5b60088110612d8157634e487b7160e01b600052602160045260246000fd5b9052565b6020810161094c8284612d63565b60008060408385031215612da657600080fd5b82359150612db660208401612a0b565b90509250929050565b803560ff81168114610df757600080fd5b60008060408385031215612de357600080fd5b82359150612db660208401612dbf565b60008083601f840112612e0557600080fd5b5081356001600160401b03811115612e1c57600080fd5b602083019150836020828501011115612e3457600080fd5b9250929050565b600080600080600080600060c0888a031215612e5657600080fd5b87359650612e6660208901612dbf565b9550612e7460408901612a0b565b945060608801356001600160401b0380821115612e9057600080fd5b612e9c8b838c01612df3565b909650945060808a0135915080821115612eb557600080fd5b612ec18b838c01612acd565b935060a08a0135915080821115612ed757600080fd5b50612ee48a828b01612acd565b91505092959891949750929550565b600080600080600060808688031215612f0b57600080fd5b85359450612f1b60208701612dbf565b935060408601356001600160401b0380821115612f3757600080fd5b612f4389838a01612df3565b90955093506060880135915080821115612f5c57600080fd5b50612f6988828901612acd565b9150509295509295909350565b60008060008060608587031215612f8c57600080fd5b84359350612f9c60208601612dbf565b925060408501356001600160401b03811115612fb757600080fd5b612fc387828801612df3565b95989497509550505050565b60008060008060808587031215612fe557600080fd5b84356001600160401b0380821115612ffc57600080fd5b61300888838901612b77565b9550602087013591508082111561301e57600080fd5b61302a88838901612be4565b9450604087013591508082111561304057600080fd5b61304c88838901612c3f565b9350606087013591508082111561306257600080fd5b508501601f8101871361307457600080fd5b612b4887823560208401612a8f565b60006020828403121561309557600080fd5b61141282612a0b565b600081518084526020808501945080840160005b838110156130ce578151875295820195908201906001016130b2565b509495945050505050565b60ff60f81b8816815260e0602082015260006130f860e08301896129cc565b828103604084015261310a81896129cc565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152905061313b818561309e565b9a9950505050505050505050565b6000806000806080858703121561315f57600080fd5b8435935061316f60208601612dbf565b925061317d60408601612a0b565b915060608501356001600160401b03811115612b3c57600080fd5b6000806000606084860312156131ad57600080fd5b6131b684612a0b565b92506020840135915060408401356001600160401b038111156131d857600080fd5b6131e486828701612acd565b9150509250925092565b600080600080600060a0868803121561320657600080fd5b61320f86612a0b565b945061321d60208701612a0b565b935060408601356001600160401b038082111561323957600080fd5b61324589838a01612be4565b9450606088013591508082111561325b57600080fd5b61326789838a01612be4565b93506080880135915080821115612f5c57600080fd5b6000806000806060858703121561329357600080fd5b61329c85612a0b565b93506020850135925060408501356001600160401b03811115612fb757600080fd5b600080604083850312156132d157600080fd5b6132da83612a0b565b946020939093013593505050565b600080600080600060a0868803121561330057600080fd5b61330986612a0b565b945061331760208701612a0b565b9350604086013592506060860135915060808601356001600160401b0381111561334057600080fd5b612f6988828901612acd565b600181811c9082168061336057607f821691505b60208210810361338057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016133c4576133c461339c565b5060010190565b6000602082840312156133dd57600080fd5b81516001600160401b038111156133f357600080fd5b8201601f8101841361340457600080fd5b8051613412612a9d82612a68565b81815285602083850101111561342757600080fd5b6117af8260208301602086016129a8565b8183823760009101908152919050565b8181038181111561094c5761094c61339c565b65ffffffffffff82811682821603908082111561347a5761347a61339c565b5092915050565b60006020828403121561349357600080fd5b815165ffffffffffff8116811461141257600080fd5b65ffffffffffff81811683821601908082111561347a5761347a61339c565b600081518084526020808501945080840160005b838110156130ce5781516001600160a01b0316875295820195908201906001016134dc565b600081518084526020808501808196508360051b8101915082860160005b858110156135495782840389526135378483516129cc565b9885019893509084019060010161351f565b5091979650505050505050565b60808152600061356960808301876134c8565b828103602084015261357b818761309e565b9050828103604084015261358f8186613501565b91505082606083015295945050505050565b838152606081016135b56020830185612d63565b826040830152949350505050565b600082516135d58184602087016129a8565b9190910192915050565b8082018082111561094c5761094c61339c565b60ff818116838216019081111561094c5761094c61339c565b600181815b8085111561364657816000190482111561362c5761362c61339c565b8085161561363957918102915b93841c9390800290613610565b509250929050565b60008261365d5750600161094c565b8161366a5750600061094c565b8160018114613680576002811461368a576136a6565b600191505061094c565b60ff84111561369b5761369b61339c565b50506001821b61094c565b5060208310610133831016604e8410600b84101617156136c9575081810a61094c565b6136d3838361360b565b80600019048211156136e7576136e761339c565b029392505050565b600061141260ff84168361364e565b84815260ff84166020820152826040820152608060608201526000610d3060808301846129cc565b85815260ff8516602082015283604082015260a06060820152600061374e60a08301856129cc565b828103608084015261111c81856129cc565b60006101208b8352602060018060a01b038c16818501528160408501526137898285018c6134c8565b9150838203606085015261379d828b61309e565b915083820360808501528189518084528284019150828160051b850101838c0160005b838110156137ee57601f198784030185526137dc8383516129cc565b948601949250908501906001016137c0565b505086810360a0880152613802818c613501565b9450505050508560c08401528460e084015282810361010084015261382781856129cc565b9c9b505050505050505050505050565b60006020828403121561384957600080fd5b5051919050565b808202811582820484141761094c5761094c61339c565b634e487b7160e01b600052601260045260246000fd5b60008261389a57634e487b7160e01b600052601260045260246000fd5b500490565b828152604060208201526000610e1d60408301846129cc56fea26469706673582212200513201a37d74c258f6a1901b73a7421b40fad79d6fcad8b6183304ff8c9716564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102605760003560e01c80637b3c71d311610144578063b58131b0116100b6578063dd4e2ba51161007a578063dd4e2ba5146107e7578063deaaa7cc1461082d578063eb9019d414610861578063f23a6e6114610881578063f8ce560a146108ad578063fc0c546a146108cd57600080fd5b8063b58131b01461041d578063bc197c8114610768578063c01f9e3714610794578063c28bc2fa146107b4578063c59057e4146107c757600080fd5b806391ddadf41161010857806391ddadf41461069a57806397c3d334146106c65780639a802a6d146106da578063a7713a70146106fa578063a9a952941461070f578063ab58fb8e1461073057600080fd5b80637b3c71d3146105dc5780637d5e81e2146105fc5780637ecebe001461061c57806384b0196e146106525780638ff262e31461067a57600080fd5b80633932abb1116101dd578063544ffc9c116101a1578063544ffc9c146104dd57806354fd4d5014610532578063567813881461055c5780635b8d0e0d1461057c5780635f398a141461059c57806360c4247f146105bc57600080fd5b80633932abb11461041d5780633e4f49e614610431578063438596321461045e578063452115d6146104a85780634bf5d7e9146104c857600080fd5b8063150b7a0211610224578063150b7a0214610352578063160cbed7146103965780632656227d146103b65780632d63f693146103c95780632fe3e261146103e957600080fd5b806301ffc9a71461026e57806302a251a3146102a357806306f3f9e6146102c257806306fdde03146102e2578063143489d01461030457600080fd5b3661026957005b005b600080fd5b34801561027a57600080fd5b5061028e610289366004612965565b610900565b60405190151581526020015b60405180910390f35b3480156102af57600080fd5b5061c4e05b60405190815260200161029a565b3480156102ce57600080fd5b506102676102dd36600461298f565b610952565b3480156102ee57600080fd5b506102f7610966565b60405161029a91906129f8565b34801561031057600080fd5b5061033a61031f36600461298f565b6000908152600460205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200161029a565b34801561035e57600080fd5b5061037d61036d366004612aed565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161029a565b3480156103a257600080fd5b506102b46103b1366004612cbe565b6109f8565b6102b46103c4366004612cbe565b610a38565b3480156103d557600080fd5b506102b46103e436600461298f565b610b6b565b3480156103f557600080fd5b506102b47f3e83946653575f9a39005e1545185629e92736b7528ab20ca3816f315424a81181565b34801561042957600080fd5b5060006102b4565b34801561043d57600080fd5b5061045161044c36600461298f565b610b8c565b60405161029a9190612d85565b34801561046a57600080fd5b5061028e610479366004612d93565b60008281526007602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104b457600080fd5b506102b46104c3366004612cbe565b610ccb565b3480156104d457600080fd5b506102f7610d3a565b3480156104e957600080fd5b506105176104f836600461298f565b6000908152600760205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161029a565b34801561053e57600080fd5b506040805180820190915260018152603160f81b60208201526102f7565b34801561056857600080fd5b506102b4610577366004612dd0565b610dfc565b34801561058857600080fd5b506102b4610597366004612e3b565b610e25565b3480156105a857600080fd5b506102b46105b7366004612ef3565b610f84565b3480156105c857600080fd5b506102b46105d736600461298f565b610fd9565b3480156105e857600080fd5b506102b46105f7366004612f76565b611067565b34801561060857600080fd5b506102b4610617366004612fcf565b6110af565b34801561062857600080fd5b506102b4610637366004613083565b6001600160a01b031660009081526002602052604090205490565b34801561065e57600080fd5b50610667611128565b60405161029a97969594939291906130d9565b34801561068657600080fd5b506102b4610695366004613149565b61116e565b3480156106a657600080fd5b506106af611240565b60405165ffffffffffff909116815260200161029a565b3480156106d257600080fd5b5060646102b4565b3480156106e657600080fd5b506102b46106f5366004613198565b6112cd565b34801561070657600080fd5b506102b46112da565b34801561071b57600080fd5b5061028e61072a36600461298f565b50600090565b34801561073c57600080fd5b506102b461074b36600461298f565b60009081526004602052604090206001015465ffffffffffff1690565b34801561077457600080fd5b5061037d6107833660046131ee565b63bc197c8160e01b95945050505050565b3480156107a057600080fd5b506102b46107af36600461298f565b6112f4565b6102676107c236600461327d565b611337565b3480156107d357600080fd5b506102b46107e2366004612cbe565b6113b7565b3480156107f357600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e908201526102f7565b34801561083957600080fd5b506102b47ff2aad550cf55f045cb27e9c559f9889fdfb6e6cdaa032301d6ea397784ae51d781565b34801561086d57600080fd5b506102b461087c3660046132be565b6113f1565b34801561088d57600080fd5b5061037d61089c3660046132e8565b63f23a6e6160e01b95945050505050565b3480156108b957600080fd5b506102b46108c836600461298f565b611419565b3480156108d957600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061033a565b60006001600160e01b031982166332a2ad4360e11b148061093157506001600160e01b03198216630271189760e51b145b8061094c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61095a611424565b6109638161145b565b50565b6060600380546109759061334c565b80601f01602080910402602001604051908101604052809291908181526020018280546109a19061334c565b80156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905090565b600080610a07868686866113b7565b9050610a1c81610a1760046114f1565b611514565b506000604051634844252360e11b815260040160405180910390fd5b600080610a47868686866113b7565b9050610a6781610a5760056114f1565b610a6160046114f1565b17611514565b506000818152600460205260409020805460ff60f01b1916600160f01b17905530610a8f3090565b6001600160a01b031614610b215760005b8651811015610b1f57306001600160a01b0316878281518110610ac557610ac5613386565b60200260200101516001600160a01b031603610b0f57610b0f858281518110610af057610af0613386565b602002602001015180519060200120600561155390919063ffffffff16565b610b18816133b2565b9050610aa0565b505b610b2e81878787876115c4565b6040518181527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f906020015b60405180910390a195945050505050565b600090815260046020526040902054600160a01b900465ffffffffffff1690565b6000818152600460205260408120805460ff600160f01b8204811691600160f81b9004168115610bc157506007949350505050565b8015610bd257506002949350505050565b6000610bdd86610b6b565b905080600003610c0857604051636ad0607560e01b8152600481018790526024015b60405180910390fd5b6000610c12611240565b65ffffffffffff169050808210610c30575060009695505050505050565b6000610c3b886112f4565b9050818110610c5257506001979650505050505050565b610c5b886116a4565b1580610c7b57506000888152600760205260409020805460019091015411155b15610c8e57506003979650505050505050565b60008881526004602052604090206001015465ffffffffffff16600003610cbd57506004979650505050505050565b506005979650505050505050565b600080610cda868686866113b7565b9050610cea81610a1760006114f1565b506000818152600460205260409020546001600160a01b03163314610d245760405163233d98e360e01b8152336004820152602401610bff565b610d30868686866116db565b9695505050505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634bf5d7e96040518163ffffffff1660e01b8152600401600060405180830381865afa925050508015610dbb57506040513d6000823e601f3d908101601f19168201604052610db891908101906133cb565b60015b610df7575060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b919050565b600080339050610e1d8482856040518060200160405280600081525061178c565b949350505050565b600080610f0887610f027f3e83946653575f9a39005e1545185629e92736b7528ab20ca3816f315424a8118c8c8c610e7a8e6001600160a01b0316600090815260026020526040902080546001810190915590565b8d8d604051610e8a929190613438565b60405180910390208c80519060200120604051602001610ee79796959493929190968752602087019590955260ff9390931660408601526001600160a01b03919091166060850152608084015260a083015260c082015260e00190565b604051602081830303815290604052805190602001206117b8565b856117e5565b905080610f33576040516394ab6c0760e01b81526001600160a01b0388166004820152602401610bff565b610f7789888a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b925061183d915050565b9998505050505050505050565b600080339050610fce87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061183d915050565b979650505050505050565b600880546000918290610fed600184613448565b81548110610ffd57610ffd613386565b6000918252602090912001805490915065ffffffffffff811690600160301b90046001600160d01b0316858211611040576001600160d01b031695945050505050565b61105461104c8761191a565b600890611951565b6001600160d01b03169695505050505050565b600080339050610d3086828787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061178c92505050565b6000336110bc8184611a06565b6110e45760405163d9b3955760e01b81526001600160a01b0382166004820152602401610bff565b600061110b8260016110f4611240565b6110fe919061345b565b65ffffffffffff166113f1565b9050600061111c8888888887611af7565b98975050505050505050565b60006060806000806000606061113c611cfc565b611144611d29565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6000806111fa84610f027ff2aad550cf55f045cb27e9c559f9889fdfb6e6cdaa032301d6ea397784ae51d78989896111c38b6001600160a01b0316600090815260026020526040902080546001810190915590565b60408051602081019690965285019390935260ff90911660608401526001600160a01b0316608083015260a082015260c001610ee7565b905080611225576040516394ab6c0760e01b81526001600160a01b0385166004820152602401610bff565b610d308685876040518060200160405280600081525061178c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391ddadf46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156112bc575060408051601f3d908101601f191682019092526112b991810190613481565b60015b610df7576112c8611d56565b905090565b6000610e1d848484611d61565b60006112e66008611df7565b6001600160d01b0316905090565b60008181526004602052604081205461132990600160d01b810463ffffffff1690600160a01b900465ffffffffffff166134a9565b65ffffffffffff1692915050565b61133f611424565b600080856001600160a01b031685858560405161135d929190613438565b60006040518083038185875af1925050503d806000811461139a576040519150601f19603f3d011682016040523d82523d6000602084013e61139f565b606091505b50915091506113ae8282611e30565b50505050505050565b6000848484846040516020016113d09493929190613556565b60408051601f19818403018152919052805160209091012095945050505050565b6000611412838361140d60408051602081019091526000815290565b611d61565b9392505050565b600061094c82611e4c565b303314611446576040516347096e4760e01b8152336004820152602401610bff565b565b806114536005611ef6565b036114485750565b6064808211156114885760405163243e544560e01b81526004810183905260248101829052604401610bff565b60006114926112da565b90506114b161149f611240565b6114a885611f74565b60089190611fa8565b505060408051828152602081018590527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a1505050565b600081600781111561150557611505612d4d565b600160ff919091161b92915050565b60008061152084610b8c565b905060008361152e836114f1565b1603611412578381846040516331b75e4d60e01b8152600401610bff939291906135a1565b81546001600160801b03600160801b82048116918116600183019091160361158e57604051638acb5f2760e01b815260040160405180910390fd5b6001600160801b03808216600090815260018086016020526040909120939093558354919092018216600160801b029116179055565b60005b845181101561169c576000808683815181106115e5576115e5613386565b60200260200101516001600160a01b031686848151811061160857611608613386565b602002602001015186858151811061162257611622613386565b602002602001015160405161163791906135c3565b60006040518083038185875af1925050503d8060008114611674576040519150601f19603f3d011682016040523d82523d6000602084013e611679565b606091505b50915091506116888282611e30565b50505080611695906133b2565b90506115c7565b505050505050565b6000818152600760205260408120600281015460018201546116c691906135df565b6116d26108c885610b6b565b11159392505050565b6000806116ea868686866113b7565b9050611738816116fa60076114f1565b61170460066114f1565b61170e60026114f1565b600161171b6007826135f2565b6117269060026136ef565b6117309190613448565b181818611514565b506000818152600460205260409081902080546001600160f81b0316600160f81b179055517f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90610b5a9083815260200190565b60006117af858585856117aa60408051602081019091526000815290565b61183d565b95945050505050565b600061094c6117c5611fc3565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006117f485856120ee565b509092509050600081600381111561180e5761180e612d4d565b14801561182c5750856001600160a01b0316826001600160a01b0316145b80610d305750610d3086868661213b565b600061184d86610a1760016114f1565b5060006118638661185d89610b6b565b85611d61565b90506118728787878487612216565b82516000036118c757856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda4888784886040516118ba94939291906136fe565b60405180910390a2610d30565b856001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb87128887848888604051611908959493929190613726565b60405180910390a29695505050505050565b600065ffffffffffff82111561194d576040516306dfcc6560e41b81526030600482015260248101839052604401610bff565b5090565b8154600090818160058111156119b057600061196c8461230f565b6119769085613448565b60008881526020902090915081015465ffffffffffff90811690871610156119a0578091506119ae565b6119ab8160016135df565b92505b505b60006119be878785856123f7565b905080156119f9576119e3876119d5600184613448565b600091825260209091200190565b54600160301b90046001600160d01b0316610fce565b6000979650505050505050565b80516000906034811015611a1e57600191505061094c565b82810160131901516001600160a01b031981166b046e0e4dee0dee6cae47a60f60a31b14611a515760019250505061094c565b600080611a5f602885613448565b90505b83811015611ad657600080611a96888481518110611a8257611a82613386565b01602001516001600160f81b031916612459565b9150915081611aae576001965050505050505061094c565b8060ff166004856001600160a01b0316901b179350505080611acf906133b2565b9050611a62565b50856001600160a01b0316816001600160a01b031614935050505092915050565b6000611b0c86868686805190602001206113b7565b905084518651141580611b2157508351865114155b80611b2b57508551155b15611b6057855184518651604051630447b05d60e41b8152600481019390935260248301919091526044820152606401610bff565b600081815260046020526040902054600160a01b900465ffffffffffff1615611bab5780611b8d82610b8c565b6040516331b75e4d60e01b8152610bff9291906000906004016135a1565b600080611bb6611240565b65ffffffffffff16611bc891906135df565b9050600061c4e0600084815260046020526040902080546001600160a01b0319166001600160a01b038716178155909150611c028361191a565b815465ffffffffffff91909116600160a01b0265ffffffffffff60a01b19909116178155611c2f826124eb565b815463ffffffff91909116600160d01b0263ffffffff60d01b1990911617815588517f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e090859087908c908c906001600160401b03811115611c9257611c92612a22565b604051908082528060200260200182016040528015611cc557816020015b6060815260200190600190039081611cb05790505b508c89611cd28a826135df565b8e604051611ce899989796959493929190613760565b60405180910390a150505095945050505050565b60606112c87f0000000000000000000000000000000000000000000000000000000000000000600061251c565b60606112c87f0000000000000000000000000000000000000000000000000000000000000000600161251c565b60006112c84361191a565b60007f0000000000000000000000000000000000000000000000000000000000000000604051630748d63560e31b81526001600160a01b038681166004830152602482018690529190911690633a46b1a890604401602060405180830381865afa158015611dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d9190613837565b80546000908015611e2757611e11836119d5600184613448565b54600160301b90046001600160d01b0316611412565b60009392505050565b606082611e4557611e40826125c7565b61094c565b508061094c565b60006064611e5983610fd9565b604051632394e7a360e21b8152600481018590526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638e539e8c90602401602060405180830381865afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee29190613837565b611eec9190613850565b61094c919061387d565b80546000906001600160801b0380821691600160801b9004168103611f2e576040516375e52f4f60e01b815260040160405180910390fd5b6001600160801b038181166000908152600185810160205260408220805492905585546fffffffffffffffffffffffffffffffff19169301909116919091179092555090565b60006001600160d01b0382111561194d576040516306dfcc6560e41b815260d0600482015260248101839052604401610bff565b600080611fb68585856125f0565b915091505b935093915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561201c57507f000000000000000000000000000000000000000000000000000000000000000046145b1561204657507f000000000000000000000000000000000000000000000000000000000000000090565b6112c8604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080600083516041036121285760208401516040850151606086015160001a61211a8882858561276a565b955095509550505050612134565b50508151600091506002905b9250925092565b6000806000856001600160a01b0316858560405160240161215d92919061389f565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b1790525161219291906135c3565b600060405180830381855afa9150503d80600081146121cd576040519150601f19603f3d011682016040523d82523d6000602084013e6121d2565b606091505b50915091508180156121e657506020815110155b8015610d3057508051630b135d3f60e11b9061220b9083016020908101908401613837565b149695505050505050565b60008581526007602090815260408083206001600160a01b0388168452600381019092529091205460ff161561226a576040516371c6af4960e01b81526001600160a01b0386166004820152602401610bff565b6001600160a01b03851660009081526003820160205260409020805460ff1916600117905560ff84166122b657828160000160008282546122ab91906135df565b9091555061169c9050565b60001960ff8516016122d657828160010160008282546122ab91906135df565b60011960ff8516016122f657828160020160008282546122ab91906135df565b6040516303599be160e11b815260040160405180910390fd5b60008160000361232157506000919050565b6000600161232e84612839565b901c6001901b9050600181848161234757612347613867565b048201901c9050600181848161235f5761235f613867565b048201901c9050600181848161237757612377613867565b048201901c9050600181848161238f5761238f613867565b048201901c905060018184816123a7576123a7613867565b048201901c905060018184816123bf576123bf613867565b048201901c905060018184816123d7576123d7613867565b048201901c9050611412818285816123f1576123f1613867565b046128cd565b60005b8183101561245157600061240e84846128e3565b60008781526020902090915065ffffffffffff86169082015465ffffffffffff16111561243d5780925061244b565b6124488160016135df565b93505b506123fa565b509392505050565b60008060f883901c602f811180156124745750603a8160ff16105b1561248957600194602f199091019350915050565b8060ff16604010801561249f575060478160ff16105b156124b4576001946036199091019350915050565b8060ff1660601080156124ca575060678160ff16105b156124df576001946056199091019350915050565b50600093849350915050565b600063ffffffff82111561194d576040516306dfcc6560e41b81526020600482015260248101839052604401610bff565b606060ff83146125365761252f836128fe565b905061094c565b8180546125429061334c565b80601f016020809104026020016040519081016040528092919081815260200182805461256e9061334c565b80156125bb5780601f10612590576101008083540402835291602001916125bb565b820191906000526020600020905b81548152906001019060200180831161259e57829003601f168201915b5050505050905061094c565b8051156125d75780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b82546000908190801561270f57600061260e876119d5600185613448565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b03166020840152919250908716101561266257604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff8088169116036126ae5784612685886119d5600186613448565b80546001600160d01b0392909216600160301b0265ffffffffffff9092169190911790556126ff565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160301b029216919091179101555b602001519250839150611fbb9050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160301b029190931617920191909155905081611fbb565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156127a5575060009150600390508261282f565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156127f9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128255750600092506001915082905061282f565b9250600091508190505b9450945094915050565b600080608083901c1561284e57608092831c92015b604083901c1561286057604092831c92015b602083901c1561287257602092831c92015b601083901c1561288457601092831c92015b600883901c1561289657600892831c92015b600483901c156128a857600492831c92015b600283901c156128ba57600292831c92015b600183901c1561094c5760010192915050565b60008183106128dc5781611412565b5090919050565b60006128f2600284841861387d565b611412908484166135df565b6060600061290b8361293d565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f81111561094c57604051632cd44ac360e21b815260040160405180910390fd5b60006020828403121561297757600080fd5b81356001600160e01b03198116811461141257600080fd5b6000602082840312156129a157600080fd5b5035919050565b60005b838110156129c35781810151838201526020016129ab565b50506000910152565b600081518084526129e48160208601602086016129a8565b601f01601f19169290920160200192915050565b60208152600061141260208301846129cc565b80356001600160a01b0381168114610df757600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a6057612a60612a22565b604052919050565b60006001600160401b03821115612a8157612a81612a22565b50601f01601f191660200190565b6000612aa2612a9d84612a68565b612a38565b9050828152838383011115612ab657600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ade57600080fd5b61141283833560208501612a8f565b60008060008060808587031215612b0357600080fd5b612b0c85612a0b565b9350612b1a60208601612a0b565b92506040850135915060608501356001600160401b03811115612b3c57600080fd5b612b4887828801612acd565b91505092959194509250565b60006001600160401b03821115612b6d57612b6d612a22565b5060051b60200190565b600082601f830112612b8857600080fd5b81356020612b98612a9d83612b54565b82815260059290921b84018101918181019086841115612bb757600080fd5b8286015b84811015612bd957612bcc81612a0b565b8352918301918301612bbb565b509695505050505050565b600082601f830112612bf557600080fd5b81356020612c05612a9d83612b54565b82815260059290921b84018101918181019086841115612c2457600080fd5b8286015b84811015612bd95780358352918301918301612c28565b600082601f830112612c5057600080fd5b81356020612c60612a9d83612b54565b82815260059290921b84018101918181019086841115612c7f57600080fd5b8286015b84811015612bd95780356001600160401b03811115612ca25760008081fd5b612cb08986838b0101612acd565b845250918301918301612c83565b60008060008060808587031215612cd457600080fd5b84356001600160401b0380821115612ceb57600080fd5b612cf788838901612b77565b95506020870135915080821115612d0d57600080fd5b612d1988838901612be4565b94506040870135915080821115612d2f57600080fd5b50612d3c87828801612c3f565b949793965093946060013593505050565b634e487b7160e01b600052602160045260246000fd5b60088110612d8157634e487b7160e01b600052602160045260246000fd5b9052565b6020810161094c8284612d63565b60008060408385031215612da657600080fd5b82359150612db660208401612a0b565b90509250929050565b803560ff81168114610df757600080fd5b60008060408385031215612de357600080fd5b82359150612db660208401612dbf565b60008083601f840112612e0557600080fd5b5081356001600160401b03811115612e1c57600080fd5b602083019150836020828501011115612e3457600080fd5b9250929050565b600080600080600080600060c0888a031215612e5657600080fd5b87359650612e6660208901612dbf565b9550612e7460408901612a0b565b945060608801356001600160401b0380821115612e9057600080fd5b612e9c8b838c01612df3565b909650945060808a0135915080821115612eb557600080fd5b612ec18b838c01612acd565b935060a08a0135915080821115612ed757600080fd5b50612ee48a828b01612acd565b91505092959891949750929550565b600080600080600060808688031215612f0b57600080fd5b85359450612f1b60208701612dbf565b935060408601356001600160401b0380821115612f3757600080fd5b612f4389838a01612df3565b90955093506060880135915080821115612f5c57600080fd5b50612f6988828901612acd565b9150509295509295909350565b60008060008060608587031215612f8c57600080fd5b84359350612f9c60208601612dbf565b925060408501356001600160401b03811115612fb757600080fd5b612fc387828801612df3565b95989497509550505050565b60008060008060808587031215612fe557600080fd5b84356001600160401b0380821115612ffc57600080fd5b61300888838901612b77565b9550602087013591508082111561301e57600080fd5b61302a88838901612be4565b9450604087013591508082111561304057600080fd5b61304c88838901612c3f565b9350606087013591508082111561306257600080fd5b508501601f8101871361307457600080fd5b612b4887823560208401612a8f565b60006020828403121561309557600080fd5b61141282612a0b565b600081518084526020808501945080840160005b838110156130ce578151875295820195908201906001016130b2565b509495945050505050565b60ff60f81b8816815260e0602082015260006130f860e08301896129cc565b828103604084015261310a81896129cc565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152905061313b818561309e565b9a9950505050505050505050565b6000806000806080858703121561315f57600080fd5b8435935061316f60208601612dbf565b925061317d60408601612a0b565b915060608501356001600160401b03811115612b3c57600080fd5b6000806000606084860312156131ad57600080fd5b6131b684612a0b565b92506020840135915060408401356001600160401b038111156131d857600080fd5b6131e486828701612acd565b9150509250925092565b600080600080600060a0868803121561320657600080fd5b61320f86612a0b565b945061321d60208701612a0b565b935060408601356001600160401b038082111561323957600080fd5b61324589838a01612be4565b9450606088013591508082111561325b57600080fd5b61326789838a01612be4565b93506080880135915080821115612f5c57600080fd5b6000806000806060858703121561329357600080fd5b61329c85612a0b565b93506020850135925060408501356001600160401b03811115612fb757600080fd5b600080604083850312156132d157600080fd5b6132da83612a0b565b946020939093013593505050565b600080600080600060a0868803121561330057600080fd5b61330986612a0b565b945061331760208701612a0b565b9350604086013592506060860135915060808601356001600160401b0381111561334057600080fd5b612f6988828901612acd565b600181811c9082168061336057607f821691505b60208210810361338057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016133c4576133c461339c565b5060010190565b6000602082840312156133dd57600080fd5b81516001600160401b038111156133f357600080fd5b8201601f8101841361340457600080fd5b8051613412612a9d82612a68565b81815285602083850101111561342757600080fd5b6117af8260208301602086016129a8565b8183823760009101908152919050565b8181038181111561094c5761094c61339c565b65ffffffffffff82811682821603908082111561347a5761347a61339c565b5092915050565b60006020828403121561349357600080fd5b815165ffffffffffff8116811461141257600080fd5b65ffffffffffff81811683821601908082111561347a5761347a61339c565b600081518084526020808501945080840160005b838110156130ce5781516001600160a01b0316875295820195908201906001016134dc565b600081518084526020808501808196508360051b8101915082860160005b858110156135495782840389526135378483516129cc565b9885019893509084019060010161351f565b5091979650505050505050565b60808152600061356960808301876134c8565b828103602084015261357b818761309e565b9050828103604084015261358f8186613501565b91505082606083015295945050505050565b838152606081016135b56020830185612d63565b826040830152949350505050565b600082516135d58184602087016129a8565b9190910192915050565b8082018082111561094c5761094c61339c565b60ff818116838216019081111561094c5761094c61339c565b600181815b8085111561364657816000190482111561362c5761362c61339c565b8085161561363957918102915b93841c9390800290613610565b509250929050565b60008261365d5750600161094c565b8161366a5750600061094c565b8160018114613680576002811461368a576136a6565b600191505061094c565b60ff84111561369b5761369b61339c565b50506001821b61094c565b5060208310610133831016604e8410600b84101617156136c9575081810a61094c565b6136d3838361360b565b80600019048211156136e7576136e761339c565b029392505050565b600061141260ff84168361364e565b84815260ff84166020820152826040820152608060608201526000610d3060808301846129cc565b85815260ff8516602082015283604082015260a06060820152600061374e60a08301856129cc565b828103608084015261111c81856129cc565b60006101208b8352602060018060a01b038c16818501528160408501526137898285018c6134c8565b9150838203606085015261379d828b61309e565b915083820360808501528189518084528284019150828160051b850101838c0160005b838110156137ee57601f198784030185526137dc8383516129cc565b948601949250908501906001016137c0565b505086810360a0880152613802818c613501565b9450505050508560c08401528460e084015282810361010084015261382781856129cc565b9c9b505050505050505050505050565b60006020828403121561384957600080fd5b5051919050565b808202811582820484141761094c5761094c61339c565b634e487b7160e01b600052601260045260246000fd5b60008261389a57634e487b7160e01b600052601260045260246000fd5b500490565b828152604060208201526000610e1d60408301846129cc56fea26469706673582212200513201a37d74c258f6a1901b73a7421b40fad79d6fcad8b6183304ff8c9716564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "CheckpointUnorderedInsertion()": [
        {
          "details": "A value was attempted to be inserted on a past checkpoint."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "GovernorAlreadyCastVote(address)": [
        {
          "details": "The vote was already cast."
        }
      ],
      "GovernorAlreadyQueuedProposal(uint256)": [
        {
          "details": "The proposal has already been queued."
        }
      ],
      "GovernorDisabledDeposit()": [
        {
          "details": "Token deposits are disabled in this contract."
        }
      ],
      "GovernorInsufficientProposerVotes(address,uint256,uint256)": [
        {
          "details": "The `proposer` does not have the required votes to create a proposal."
        }
      ],
      "GovernorInvalidProposalLength(uint256,uint256,uint256)": [
        {
          "details": "Empty proposal or a mismatch between the parameters length for a proposal call."
        }
      ],
      "GovernorInvalidQuorumFraction(uint256,uint256)": [
        {
          "details": "The quorum set is not a valid fraction."
        }
      ],
      "GovernorInvalidSignature(address)": [
        {
          "details": "The provided signature is not valid for the expected `voter`. If the `voter` is a contract, the signature is not valid using {IERC1271-isValidSignature}."
        }
      ],
      "GovernorInvalidVoteType()": [
        {
          "details": "The vote type used is not valid for the corresponding counting module."
        }
      ],
      "GovernorInvalidVotingPeriod(uint256)": [
        {
          "details": "The voting period set is not a valid period."
        }
      ],
      "GovernorNonexistentProposal(uint256)": [
        {
          "details": "The `proposalId` doesn't exist."
        }
      ],
      "GovernorNotQueuedProposal(uint256)": [
        {
          "details": "The proposal hasn't been queued yet."
        }
      ],
      "GovernorOnlyExecutor(address)": [
        {
          "details": "The `account` is not the governance executor."
        }
      ],
      "GovernorOnlyProposer(address)": [
        {
          "details": "The `account` is not a proposer."
        }
      ],
      "GovernorQueueNotImplemented()": [
        {
          "details": "Queue operation is not implemented for this governor. Execute should be called directly."
        }
      ],
      "GovernorRestrictedProposer(address)": [
        {
          "details": "The `proposer` is not allowed to create a proposal."
        }
      ],
      "GovernorUnexpectedProposalState(uint256,uint8,bytes32)": [
        {
          "details": "The current state of a proposal is not the required for performing an operation. The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position counting from right to left. NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist). This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated). See {Governor-_encodeStateBitmap}."
        }
      ],
      "InvalidAccountNonce(address,uint256)": [
        {
          "details": "The nonce used for an `account` is not the expected current nonce."
        }
      ],
      "QueueEmpty()": [
        {
          "details": "An operation (e.g. {front}) couldn't be completed due to the queue being empty."
        }
      ],
      "QueueFull()": [
        {
          "details": "A push operation couldn't be completed due to the queue being full."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "ProposalCanceled(uint256)": {
        "details": "Emitted when a proposal is canceled."
      },
      "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {
        "details": "Emitted when a proposal is created."
      },
      "ProposalExecuted(uint256)": {
        "details": "Emitted when a proposal is executed."
      },
      "ProposalQueued(uint256,uint256)": {
        "details": "Emitted when a proposal is queued."
      },
      "VoteCast(address,uint256,uint8,uint256,string)": {
        "details": "Emitted when a vote is cast without params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used."
      },
      "VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)": {
        "details": "Emitted when a vote is cast with params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used. `params` are additional encoded parameters. Their interpepretation also depends on the voting module used."
      }
    },
    "kind": "dev",
    "methods": {
      "CLOCK_MODE()": {
        "details": "Machine-readable description of the clock as specified in EIP-6372."
      },
      "COUNTING_MODE()": {
        "details": "See {IGovernor-COUNTING_MODE}."
      },
      "cancel(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-cancel}."
      },
      "castVote(uint256,uint8)": {
        "details": "See {IGovernor-castVote}."
      },
      "castVoteBySig(uint256,uint8,address,bytes)": {
        "details": "See {IGovernor-castVoteBySig}."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "details": "See {IGovernor-castVoteWithReason}."
      },
      "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": {
        "details": "See {IGovernor-castVoteWithReasonAndParams}."
      },
      "castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)": {
        "details": "See {IGovernor-castVoteWithReasonAndParamsBySig}."
      },
      "clock()": {
        "details": "Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token does not implement EIP-6372."
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "execute(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-execute}."
      },
      "getVotes(address,uint256)": {
        "details": "See {IGovernor-getVotes}."
      },
      "getVotesWithParams(address,uint256,bytes)": {
        "details": "See {IGovernor-getVotesWithParams}."
      },
      "hasVoted(uint256,address)": {
        "details": "See {IGovernor-hasVoted}."
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
      },
      "name()": {
        "details": "See {IGovernor-name}."
      },
      "nonces(address)": {
        "details": "Returns the next unused nonce for an address."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155Receiver-onERC1155BatchReceived}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock)."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155Receiver-onERC1155Received}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock)."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock)."
      },
      "proposalDeadline(uint256)": {
        "details": "See {IGovernor-proposalDeadline}."
      },
      "proposalEta(uint256)": {
        "details": "See {IGovernor-proposalEta}."
      },
      "proposalNeedsQueuing(uint256)": {
        "details": "See {IGovernor-proposalNeedsQueuing}."
      },
      "proposalProposer(uint256)": {
        "details": "See {IGovernor-proposalProposer}."
      },
      "proposalSnapshot(uint256)": {
        "details": "See {IGovernor-proposalSnapshot}."
      },
      "proposalThreshold()": {
        "details": "See {IGovernor-proposalThreshold}."
      },
      "proposalVotes(uint256)": {
        "details": "Accessor to the internal vote counts."
      },
      "propose(address[],uint256[],bytes[],string)": {
        "details": "See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}."
      },
      "queue(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-queue}."
      },
      "quorumDenominator()": {
        "details": "Returns the quorum denominator. Defaults to 100, but may be overridden."
      },
      "quorumNumerator()": {
        "details": "Returns the current quorum numerator. See {quorumDenominator}."
      },
      "quorumNumerator(uint256)": {
        "details": "Returns the quorum numerator at a specific timepoint. See {quorumDenominator}."
      },
      "relay(address,uint256,bytes)": {
        "details": "Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant."
      },
      "state(uint256)": {
        "details": "See {IGovernor-state}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "token()": {
        "details": "The token that voting power is sourced from."
      },
      "updateQuorumNumerator(uint256)": {
        "details": "Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator."
      },
      "version()": {
        "details": "See {IGovernor-version}."
      },
      "votingDelay()": {
        "details": "Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a proposal starts. NOTE: While this interface returns a uint256, timepoints are stored as uint48 following the ERC-6372 clock type. Consequently this value must fit in a uint48 (when added to the current clock). See {IERC6372-clock}."
      },
      "votingPeriod()": {
        "details": "Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay. NOTE: This value is stored when the proposal is submitted so that possible changes to the value do not affect proposals that have already been submitted. The type used to save it is a uint32. Consequently, while this interface returns a uint256, the value it returns should fit in a uint32."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "votingDelay()": {
        "notice": "module:user-config"
      },
      "votingPeriod()": {
        "notice": "module:user-config"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4331,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4333,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3310,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 89,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 94,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(ProposalCore)67_storage)"
      },
      {
        "astId": 97,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_governanceCall",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Bytes32Deque)9240_storage"
      },
      {
        "astId": 2290,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_proposalVotes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(ProposalVote)2285_storage)"
      },
      {
        "astId": 2624,
        "contract": "contracts/Governor.sol:NDCGovernor",
        "label": "_quorumNumeratorHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Trace208)8180_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Checkpoint208)8185_storage)dyn_storage": {
        "base": "t_struct(Checkpoint208)8185_storage",
        "encoding": "dynamic_array",
        "label": "struct Checkpoints.Checkpoint208[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint128,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(ProposalCore)67_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Governor.ProposalCore)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalCore)67_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)2285_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)2285_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Deque)9240_storage": {
        "encoding": "inplace",
        "label": "struct DoubleEndedQueue.Bytes32Deque",
        "members": [
          {
            "astId": 9233,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "_begin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9235,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "_end",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9239,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "_data",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint128,t_bytes32)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint208)8185_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Checkpoint208",
        "members": [
          {
            "astId": 8182,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8184,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "_value",
            "offset": 6,
            "slot": "0",
            "type": "t_uint208"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProposalCore)67_storage": {
        "encoding": "inplace",
        "label": "struct Governor.ProposalCore",
        "members": [
          {
            "astId": 56,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "proposer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 58,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "voteStart",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 60,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "voteDuration",
            "offset": 26,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 62,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "executed",
            "offset": 30,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 64,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "canceled",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 66,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "etaSeconds",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProposalVote)2285_storage": {
        "encoding": "inplace",
        "label": "struct GovernorCountingSimple.ProposalVote",
        "members": [
          {
            "astId": 2276,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "againstVotes",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2278,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "forVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2280,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2284,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "hasVoted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Trace208)8180_storage": {
        "encoding": "inplace",
        "label": "struct Checkpoints.Trace208",
        "members": [
          {
            "astId": 8179,
            "contract": "contracts/Governor.sol:NDCGovernor",
            "label": "_checkpoints",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint208)8185_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}